From a166aaab025ce43ac8a851a7b4e7dfc12ee878a1 Mon Sep 17 00:00:00 2001
From: Daniyal Mahmood <daniyalmahmhmood123@gmail.com>
Date: Sun, 25 Jul 2021 15:19:45 +0530
Subject: [PATCH 15/18] merge master

---
 css/_reactions-menu.scss                      | 189 +++++++++
 .../components/web/DisplayNameBadge.js        |  45 ++
 .../components/web/DominantSpeakerName.js     |  60 +++
 react/features/jaas/middleware.any.js         |  37 ++
 react/features/large-video/functions.js       |  15 +
 .../features/participants-pane/actions.any.js |  28 ++
 .../participants-pane/actions.native.js       |  50 +++
 .../features/participants-pane/actions.web.js |   3 +
 .../ContextMenuLobbyParticipantReject.js      |  67 +++
 .../ContextMenuMeetingParticipantDetails.js   | 264 ++++++++++++
 .../components/native/ContextMenuMore.js      |  65 +++
 .../components/native/LobbyParticipantItem.js |  49 +++
 .../components/native/LobbyParticipantList.js |  56 +++
 .../native/MeetingParticipantItem.js          | 124 ++++++
 .../native/MeetingParticipantList.js          |  72 ++++
 .../components/native/ParticipantItem.js      | 115 +++++
 .../components/native/ParticipantsPane.js     |  91 ++++
 .../native/ParticipantsPaneButton.js          |  41 ++
 .../components/native/RaisedHandIndicator.js  |  15 +
 .../components/native/index.js                |   6 +
 .../components/native/styles.js               | 347 +++++++++++++++
 .../components/web/InviteButton.js            |  32 ++
 .../components/web/LobbyParticipantItem.js    |  48 +++
 .../components/web/LobbyParticipantList.js    |  69 +++
 .../web/MeetingParticipantContextMenu.js      | 399 ++++++++++++++++++
 .../components/web/MeetingParticipantItem.js  | 179 ++++++++
 .../components/web/MeetingParticipantList.js  | 155 +++++++
 .../components/web/ParticipantItem.js         | 187 ++++++++
 .../components/web/ParticipantsPane.js        | 266 ++++++++++++
 .../components/web/RaisedHandIndicator.js     |  15 +
 .../participants-pane/components/web/index.js |   7 +
 .../components/web/styled.js                  | 346 +++++++++++++++
 react/features/reactions/actionTypes.js       |  60 +++
 react/features/reactions/actions.any.js       | 114 +++++
 react/features/reactions/actions.web.js       |  16 +
 .../features/reactions/components/_.native.js |   1 +
 react/features/reactions/components/_.web.js  |   1 +
 react/features/reactions/components/index.js  |   1 +
 .../components/native/RaiseHandButton.js      | 165 ++++++++
 .../components/native/ReactionButton.js       |  98 +++++
 .../components/native/ReactionEmoji.js        |  96 +++++
 .../components/native/ReactionMenu.js         |  59 +++
 .../components/native/ReactionMenuDialog.js   | 143 +++++++
 .../components/native/ReactionsMenuButton.js  |  90 ++++
 .../reactions/components/native/index.js      |   3 +
 .../components/web/ReactionButton.js          | 125 ++++++
 .../reactions/components/web/ReactionEmoji.js |  96 +++++
 .../reactions/components/web/ReactionsMenu.js | 242 +++++++++++
 .../components/web/ReactionsMenuButton.js     | 112 +++++
 .../components/web/ReactionsMenuPopup.js      |  58 +++
 .../reactions/components/web/index.js         |   7 +
 react/features/reactions/constants.js         |  47 +++
 react/features/reactions/functions.any.js     |  90 ++++
 react/features/reactions/functions.web.js     |  11 +
 react/features/reactions/logger.js            |   5 +
 react/features/reactions/middleware.js        |  93 ++++
 react/features/reactions/reducer.js           |  90 ++++
 .../settings/components/web/SoundsTab.js      | 123 ++++++
 .../components/web/ToggleCameraButton.js      |  75 ++++
 react/features/upload-ppt/actionTypes.js      |  38 ++
 react/features/upload-ppt/actions.any.js      |  58 +++
 react/features/upload-ppt/actions.native.js   |   1 +
 .../components/AbstractUploadPPTDialog.js     |  43 ++
 .../upload-ppt/components/_.native.js         |   1 +
 react/features/upload-ppt/components/index.js |   1 +
 .../components/native/UploadPPTDialog.js      | 125 ++++++
 .../native/UploadPresentationButton.js        | 120 ++++++
 .../upload-ppt/components/native/index.js     |   4 +
 .../upload-ppt/components/native/styles.js    |  37 ++
 react/features/upload-ppt/constants.js        |  18 +
 react/features/upload-ppt/functions.js        |  20 +
 react/features/upload-ppt/middleware.any.js   | 101 +++++
 .../features/upload-ppt/middleware.native.js  |   1 +
 react/features/upload-ppt/reducer.native.js   |  32 ++
 .../AbstractBlockAudioVideoDialog.js          |  46 ++
 .../native/BlockAudioVideoDialog.js           |  32 ++
 .../MuteRemoteParticipantsVideoDialog.js      |  32 ++
 .../components/native/VolumeSlider.js         | 157 +++++++
 react/features/video-menu/constants.js        |   8 +
 79 files changed, 6338 insertions(+)
 create mode 100644 css/_reactions-menu.scss
 create mode 100644 react/features/display-name/components/web/DisplayNameBadge.js
 create mode 100644 react/features/display-name/components/web/DominantSpeakerName.js
 create mode 100644 react/features/jaas/middleware.any.js
 create mode 100644 react/features/large-video/functions.js
 create mode 100644 react/features/participants-pane/actions.any.js
 create mode 100644 react/features/participants-pane/actions.native.js
 create mode 100644 react/features/participants-pane/actions.web.js
 create mode 100644 react/features/participants-pane/components/native/ContextMenuLobbyParticipantReject.js
 create mode 100644 react/features/participants-pane/components/native/ContextMenuMeetingParticipantDetails.js
 create mode 100644 react/features/participants-pane/components/native/ContextMenuMore.js
 create mode 100644 react/features/participants-pane/components/native/LobbyParticipantItem.js
 create mode 100644 react/features/participants-pane/components/native/LobbyParticipantList.js
 create mode 100644 react/features/participants-pane/components/native/MeetingParticipantItem.js
 create mode 100644 react/features/participants-pane/components/native/MeetingParticipantList.js
 create mode 100644 react/features/participants-pane/components/native/ParticipantItem.js
 create mode 100644 react/features/participants-pane/components/native/ParticipantsPane.js
 create mode 100644 react/features/participants-pane/components/native/ParticipantsPaneButton.js
 create mode 100644 react/features/participants-pane/components/native/RaisedHandIndicator.js
 create mode 100644 react/features/participants-pane/components/native/index.js
 create mode 100644 react/features/participants-pane/components/native/styles.js
 create mode 100644 react/features/participants-pane/components/web/InviteButton.js
 create mode 100644 react/features/participants-pane/components/web/LobbyParticipantItem.js
 create mode 100644 react/features/participants-pane/components/web/LobbyParticipantList.js
 create mode 100644 react/features/participants-pane/components/web/MeetingParticipantContextMenu.js
 create mode 100644 react/features/participants-pane/components/web/MeetingParticipantItem.js
 create mode 100644 react/features/participants-pane/components/web/MeetingParticipantList.js
 create mode 100644 react/features/participants-pane/components/web/ParticipantItem.js
 create mode 100644 react/features/participants-pane/components/web/ParticipantsPane.js
 create mode 100644 react/features/participants-pane/components/web/RaisedHandIndicator.js
 create mode 100644 react/features/participants-pane/components/web/index.js
 create mode 100644 react/features/participants-pane/components/web/styled.js
 create mode 100644 react/features/reactions/actionTypes.js
 create mode 100644 react/features/reactions/actions.any.js
 create mode 100644 react/features/reactions/actions.web.js
 create mode 100644 react/features/reactions/components/_.native.js
 create mode 100644 react/features/reactions/components/_.web.js
 create mode 100644 react/features/reactions/components/index.js
 create mode 100644 react/features/reactions/components/native/RaiseHandButton.js
 create mode 100644 react/features/reactions/components/native/ReactionButton.js
 create mode 100644 react/features/reactions/components/native/ReactionEmoji.js
 create mode 100644 react/features/reactions/components/native/ReactionMenu.js
 create mode 100644 react/features/reactions/components/native/ReactionMenuDialog.js
 create mode 100644 react/features/reactions/components/native/ReactionsMenuButton.js
 create mode 100644 react/features/reactions/components/native/index.js
 create mode 100644 react/features/reactions/components/web/ReactionButton.js
 create mode 100644 react/features/reactions/components/web/ReactionEmoji.js
 create mode 100644 react/features/reactions/components/web/ReactionsMenu.js
 create mode 100644 react/features/reactions/components/web/ReactionsMenuButton.js
 create mode 100644 react/features/reactions/components/web/ReactionsMenuPopup.js
 create mode 100644 react/features/reactions/components/web/index.js
 create mode 100644 react/features/reactions/constants.js
 create mode 100644 react/features/reactions/functions.any.js
 create mode 100644 react/features/reactions/functions.web.js
 create mode 100644 react/features/reactions/logger.js
 create mode 100644 react/features/reactions/middleware.js
 create mode 100644 react/features/reactions/reducer.js
 create mode 100644 react/features/settings/components/web/SoundsTab.js
 create mode 100644 react/features/toolbox/components/web/ToggleCameraButton.js
 create mode 100644 react/features/upload-ppt/actionTypes.js
 create mode 100644 react/features/upload-ppt/actions.any.js
 create mode 100644 react/features/upload-ppt/actions.native.js
 create mode 100644 react/features/upload-ppt/components/AbstractUploadPPTDialog.js
 create mode 100644 react/features/upload-ppt/components/_.native.js
 create mode 100644 react/features/upload-ppt/components/index.js
 create mode 100644 react/features/upload-ppt/components/native/UploadPPTDialog.js
 create mode 100644 react/features/upload-ppt/components/native/UploadPresentationButton.js
 create mode 100644 react/features/upload-ppt/components/native/index.js
 create mode 100644 react/features/upload-ppt/components/native/styles.js
 create mode 100644 react/features/upload-ppt/constants.js
 create mode 100644 react/features/upload-ppt/functions.js
 create mode 100644 react/features/upload-ppt/middleware.any.js
 create mode 100644 react/features/upload-ppt/middleware.native.js
 create mode 100644 react/features/upload-ppt/reducer.native.js
 create mode 100644 react/features/video-menu/components/AbstractBlockAudioVideoDialog.js
 create mode 100644 react/features/video-menu/components/native/BlockAudioVideoDialog.js
 create mode 100644 react/features/video-menu/components/native/MuteRemoteParticipantsVideoDialog.js
 create mode 100644 react/features/video-menu/components/native/VolumeSlider.js
 create mode 100644 react/features/video-menu/constants.js

diff --git a/css/_reactions-menu.scss b/css/_reactions-menu.scss
new file mode 100644
index 000000000..0a09a1be5
--- /dev/null
+++ b/css/_reactions-menu.scss
@@ -0,0 +1,189 @@
+@use 'sass:math';
+
+.reactions-menu {
+	width: 280px;
+	background: #292929;
+	box-shadow: 0px 3px 16px rgba(0, 0, 0, 0.6), 0px 0px 4px 1px rgba(0, 0, 0, 0.25);
+	border-radius: 3px;
+	padding: 16px;
+
+	&.overflow {
+		width: auto;
+		padding-bottom: max(env(safe-area-inset-bottom, 0), 16px);
+		background-color: #141414;
+		box-shadow: none;
+		border-radius: 0;
+		position: relative;
+
+		.toolbox-icon {
+			width: 48px;
+			height: 48px;
+
+			span.emoji {
+				width: 48px;
+				height: 48px;
+			}
+		}
+
+		.reactions-row {
+			display: flex;
+			flex-direction: row;
+			justify-content: space-around;
+
+			.toolbox-button {
+				margin-right: 0;
+			}
+		}
+	}
+
+	.toolbox-icon {
+		width: 40px;
+		height: 40px;
+		border-radius: 6px;
+
+		span.emoji {
+			width: 40px;
+			height: 40px;
+			font-size: 22px;
+			display: flex;
+			align-items: center;
+			justify-content: center;
+		}
+	}
+
+	.reactions-row {
+		.toolbox-button {
+			margin-right: 8px;
+			touch-action: manipulation;
+		}
+
+		.toolbox-button:last-of-type {
+			margin-right: 0;
+		}
+	}
+
+	.raise-hand-row {
+		margin-top: 16px;
+
+		.toolbox-button {
+			width: 100%;
+		}
+
+		.toolbox-icon {
+			width: 100%;
+			flex-direction: row;
+			align-items: center;
+
+			span.text {
+				font-style: normal;
+				font-weight: 600;
+				font-size: 14px;
+				line-height: 24px;
+				margin-left: 8px;
+			}
+		}
+	}
+}
+
+.reactions-animations-container {
+	position: absolute;
+	width: 20%;
+	bottom: 0;
+	left: 40%;
+	height: 0;
+}
+
+.reactions-menu-popup-container,
+.reactions-menu-popup {
+	display: inline-block;
+	position: relative;
+}
+
+$reactionCount: 20;
+
+@function random($min, $max) {
+  @return math.random() * ($max - $min) + $min;
+}
+
+.reaction-emoji {
+	position: absolute;
+	font-size: 24px;
+	line-height: 32px;
+	width: 32px;
+	height: 32px;
+	top: 0;
+	left: 20px;
+	opacity: 0;
+	z-index: 1;
+
+	&.reaction-0 {
+		animation: flowToRight 5s forwards ease-in-out;
+	}
+
+	@for $i from 1 through $reactionCount {
+	&.reaction-#{$i} {
+		animation: animation-#{$i} 5s forwards ease-in-out;
+		top: #{random(-40, 10)}px;
+		left: #{random(0, 30)}px;
+	}
+}
+}
+
+@keyframes flowToRight {
+	0% {
+		transform: translate(0px, 0px) scale(0.6);
+		opacity: 1;
+	}
+
+	70% {
+		transform: translate(40px, -70vh) scale(1.5);
+		opacity: 1;
+	}
+
+	75% {
+		transform: translate(40px, -70vh) scale(1.5);
+		opacity: 1;
+	}
+
+	100% {
+		transform: translate(140px, -50vh) scale(1);
+		opacity: 0;
+	}
+}
+
+@mixin animation-list {
+	@for $i from 1 through $reactionCount {
+		$topX: random(-100, 100);
+		$topY: random(65, 75);
+		$bottomX: random(150, 200);
+		$bottomY: random(40, 50);
+
+		@if $topX < 0 {
+			$bottomX: -$bottomX;
+		}
+
+		@keyframes animation-#{$i} {
+			0% {
+				transform: translate(0, 0) scale(0.6);
+				opacity: 1;
+			}
+
+			70% {
+				transform: translate(#{$topX}px, -#{$topY}vh) scale(1.5);
+				opacity: 1;
+			}
+
+			75% {
+				transform: translate(#{$topX}px, -#{$topY}vh) scale(1.5);
+				opacity: 1;
+			}
+
+			100% {
+				transform: translate(#{$bottomX}px, -#{$bottomY}vh) scale(1);
+				opacity: 0;
+			}
+		}
+	}
+}
+
+@include animation-list;
diff --git a/react/features/display-name/components/web/DisplayNameBadge.js b/react/features/display-name/components/web/DisplayNameBadge.js
new file mode 100644
index 000000000..aafeeee8b
--- /dev/null
+++ b/react/features/display-name/components/web/DisplayNameBadge.js
@@ -0,0 +1,45 @@
+// @flow
+
+import { makeStyles } from '@material-ui/core/styles';
+import React from 'react';
+
+type Props = {
+
+    /**
+     * The name to be displayed within the badge.
+     */
+    name: string
+}
+
+const useStyles = makeStyles(theme => {
+    return {
+        badge: {
+            background: 'rgba(0, 0, 0, 0.6)',
+            borderRadius: '3px',
+            color: theme.palette.text01,
+            maxWidth: '50%',
+            overflow: 'hidden',
+            padding: '2px 16px',
+            textOverflow: 'ellipsis',
+            whiteSpace: 'nowrap'
+        }
+    };
+});
+
+/**
+ * Component that displays a name badge.
+ *
+ * @param {Props} props - The props of the component.
+ * @returns {ReactElement}
+ */
+const DisplayNameBadge = ({ name }: Props) => {
+    const classes = useStyles();
+
+    return (
+        <div className = { classes.badge }>
+            {name}
+        </div>
+    );
+};
+
+export default DisplayNameBadge;
diff --git a/react/features/display-name/components/web/DominantSpeakerName.js b/react/features/display-name/components/web/DominantSpeakerName.js
new file mode 100644
index 000000000..d3efbf377
--- /dev/null
+++ b/react/features/display-name/components/web/DominantSpeakerName.js
@@ -0,0 +1,60 @@
+// @flow
+
+import { makeStyles } from '@material-ui/core/styles';
+import React from 'react';
+import { useSelector } from 'react-redux';
+
+import { getLocalParticipant } from '../../../base/participants';
+import { withPixelLineHeight } from '../../../base/styles/functions.web';
+import { getLargeVideoParticipant } from '../../../large-video/functions';
+import { isToolboxVisible } from '../../../toolbox/functions.web';
+import { isLayoutTileView } from '../../../video-layout';
+
+import DisplayNameBadge from './DisplayNameBadge';
+
+const useStyles = makeStyles(theme => {
+    return {
+        badgeContainer: {
+            ...withPixelLineHeight(theme.typography.bodyShortRegularLarge),
+            alignItems: 'center',
+            display: 'flex',
+            justifyContent: 'center',
+            marginBottom: theme.spacing(2),
+            transition: 'margin-bottom 0.3s'
+        },
+        containerElevated: {
+            marginBottom: theme.spacing(7)
+        }
+    };
+});
+
+/**
+ * Component that renders the dominant speaker's name as a badge above the toolbar in stage view.
+ *
+ * @returns {ReactElement|null}
+ */
+const DominantSpeakerName = () => {
+    const classes = useStyles();
+    const largeVideoParticipant = useSelector(getLargeVideoParticipant);
+    const nameToDisplay = largeVideoParticipant?.name;
+    const selectedId = largeVideoParticipant?.id;
+
+    const localParticipant = useSelector(getLocalParticipant);
+    const localId = localParticipant?.id;
+
+    const isTileView = useSelector(isLayoutTileView);
+    const toolboxVisible = useSelector(isToolboxVisible);
+
+    if (nameToDisplay && selectedId !== localId && !isTileView) {
+        return (
+            <div
+                className = { `${classes.badgeContainer}${toolboxVisible ? '' : ` ${classes.containerElevated}`}` }>
+                <DisplayNameBadge name = { nameToDisplay } />
+            </div>
+        );
+    }
+
+    return null;
+};
+
+export default DominantSpeakerName;
diff --git a/react/features/jaas/middleware.any.js b/react/features/jaas/middleware.any.js
new file mode 100644
index 000000000..d0263c66a
--- /dev/null
+++ b/react/features/jaas/middleware.any.js
@@ -0,0 +1,37 @@
+import { sendAnalytics, createVpaasConferenceJoinedEvent } from '../analytics';
+import { CONFERENCE_JOINED } from '../base/conference/actionTypes';
+import { MiddlewareRegistry } from '../base/redux';
+
+import { isVpaasMeeting, getVpaasTenant } from './functions';
+
+/**
+ * The redux middleware for billing counter.
+ *
+ * @param {Store} store - The redux store.
+ * @returns {Function}
+ */
+
+MiddlewareRegistry.register(store => next => async action => {
+    switch (action.type) {
+    case CONFERENCE_JOINED: {
+        _maybeTrackVpaasConferenceJoin(store.getState());
+
+        break;
+    }
+    }
+
+    return next(action);
+});
+
+/**
+ * Tracks the conference join event if the meeting is a vpaas one.
+ *
+ * @param {Store} state - The app state.
+ * @returns {Function}
+ */
+function _maybeTrackVpaasConferenceJoin(state) {
+    if (isVpaasMeeting(state)) {
+        sendAnalytics(createVpaasConferenceJoinedEvent(
+            getVpaasTenant(state)));
+    }
+}
diff --git a/react/features/large-video/functions.js b/react/features/large-video/functions.js
new file mode 100644
index 000000000..e14bfbddc
--- /dev/null
+++ b/react/features/large-video/functions.js
@@ -0,0 +1,15 @@
+// @flow
+
+import { getParticipantById } from '../base/participants';
+
+/**
+ * Selector for the participant currently displaying on the large video.
+ *
+ * @param {Object} state - The redux state.
+ * @returns {Object}
+ */
+export function getLargeVideoParticipant(state: Object) {
+    const { participantId } = state['features/large-video'];
+
+    return getParticipantById(state, participantId);
+}
diff --git a/react/features/participants-pane/actions.any.js b/react/features/participants-pane/actions.any.js
new file mode 100644
index 000000000..4ce63e75f
--- /dev/null
+++ b/react/features/participants-pane/actions.any.js
@@ -0,0 +1,28 @@
+// @flow
+
+import {
+    PARTICIPANTS_PANE_CLOSE,
+    PARTICIPANTS_PANE_OPEN
+} from './actionTypes';
+
+/**
+ * Action to close the participants pane.
+ *
+ * @returns {Object}
+ */
+export const close = () => {
+    return {
+        type: PARTICIPANTS_PANE_CLOSE
+    };
+};
+
+/**
+ * Action to open the participants pane.
+ *
+ * @returns {Object}
+ */
+export const open = () => {
+    return {
+        type: PARTICIPANTS_PANE_OPEN
+    };
+};
diff --git a/react/features/participants-pane/actions.native.js b/react/features/participants-pane/actions.native.js
new file mode 100644
index 000000000..aa6a653ad
--- /dev/null
+++ b/react/features/participants-pane/actions.native.js
@@ -0,0 +1,50 @@
+// @flow
+
+import { openDialog } from '../base/dialog';
+
+import { SET_VOLUME } from './actionTypes';
+import {
+    ContextMenuMeetingParticipantDetails,
+    ContextMenuLobbyParticipantReject
+} from './components/native';
+export * from './actions.any';
+
+/**
+ * Displays the context menu for the selected lobby participant.
+ *
+ * @param {Object} participant - The selected lobby participant.
+ * @returns {Function}
+ */
+export function showContextMenuReject(participant: Object) {
+    return openDialog(ContextMenuLobbyParticipantReject, { participant });
+}
+
+
+/**
+ * Displays the context menu for the selected meeting participant.
+ *
+ * @param {string} participantID - The selected meeting participant id.
+ * @returns {Function}
+ */
+export function showContextMenuDetails(participantID: String) {
+    return openDialog(ContextMenuMeetingParticipantDetails, { participantID });
+}
+
+/**
+ * Sets the volume.
+ *
+ * @param {string} participantId - The participant ID associated with the audio.
+ * @param {string} volume - The volume level.
+ * @returns {{
+ *     type: SET_VOLUME,
+ *     participantId: string,
+ *     volume: number
+ * }}
+ */
+export function setVolume(participantId: string, volume: number) {
+    return {
+        type: SET_VOLUME,
+        participantId,
+        volume
+    };
+}
diff --git a/react/features/participants-pane/actions.web.js b/react/features/participants-pane/actions.web.js
new file mode 100644
index 000000000..7e5279fe7
--- /dev/null
+++ b/react/features/participants-pane/actions.web.js
@@ -0,0 +1,3 @@
+// @flow
+
+export * from './actions.any';
diff --git a/react/features/participants-pane/components/native/ContextMenuLobbyParticipantReject.js b/react/features/participants-pane/components/native/ContextMenuLobbyParticipantReject.js
new file mode 100644
index 000000000..438824dd1
--- /dev/null
+++ b/react/features/participants-pane/components/native/ContextMenuLobbyParticipantReject.js
@@ -0,0 +1,67 @@
+// @flow
+
+import React, { useCallback } from 'react';
+import { useTranslation } from 'react-i18next';
+import { TouchableOpacity, View } from 'react-native';
+import { Divider, Text } from 'react-native-paper';
+import { useDispatch, useSelector } from 'react-redux';
+
+import { Avatar } from '../../../base/avatar';
+import { hideDialog } from '../../../base/dialog';
+import BottomSheet from '../../../base/dialog/components/native/BottomSheet';
+import {
+    Icon, IconClose
+} from '../../../base/icons';
+import { setKnockingParticipantApproval } from '../../../lobby/actions.native';
+import { getKnockingParticipantsById } from '../../../lobby/functions';
+
+import styles from './styles';
+type Props = {
+
+    /**
+     * Participant reference
+     */
+    participant: Object
+};
+
+const ContextMenuLobbyParticipantReject = ({ participant: p }: Props) => {
+    const dispatch = useDispatch();
+    const knockParticipantsIDArr = useSelector(getKnockingParticipantsById);
+    const knockParticipantIsAvailable = knockParticipantsIDArr.find(knockPartId => knockPartId === p.id);
+    const cancel = useCallback(() => dispatch(hideDialog()), [ dispatch ]);
+    const displayName = p.name;
+    const reject = useCallback(() => dispatch(setKnockingParticipantApproval(p.id, false), [ dispatch ]));
+    const { t } = useTranslation();
+
+    return (
+        <BottomSheet
+            addScrollViewPadding = { false }
+            onCancel = { cancel }
+            showSlidingView = { Boolean(knockParticipantIsAvailable) }
+            style = { styles.contextMenuMore }>
+            <View
+                style = { styles.contextMenuItemSectionAvatar }>
+                <Avatar
+                    className = 'participant-avatar'
+                    participantId = { p.id }
+                    size = { 20 } />
+                <View style = { styles.contextMenuItemAvatarText }>
+                    <Text style = { styles.contextMenuItemName }>
+                        { displayName }
+                    </Text>
+                </View>
+            </View>
+            <Divider style = { styles.divider } />
+            <TouchableOpacity
+                onPress = { reject }
+                style = { styles.contextMenuItem }>
+                <Icon
+                    size = { 20 }
+                    src = { IconClose } />
+                <Text style = { styles.contextMenuItemText }>{ t('lobby.reject') }</Text>
+            </TouchableOpacity>
+        </BottomSheet>
+    );
+};
+
+export default ContextMenuLobbyParticipantReject;
diff --git a/react/features/participants-pane/components/native/ContextMenuMeetingParticipantDetails.js b/react/features/participants-pane/components/native/ContextMenuMeetingParticipantDetails.js
new file mode 100644
index 000000000..8ef0c2d4b
--- /dev/null
+++ b/react/features/participants-pane/components/native/ContextMenuMeetingParticipantDetails.js
@@ -0,0 +1,264 @@
+// @flow
+
+import React, { useCallback } from 'react';
+import { useTranslation } from 'react-i18next';
+import { TouchableOpacity, View } from 'react-native';
+import { Divider, Text } from 'react-native-paper';
+import { useDispatch } from 'react-redux';
+
+import { Avatar } from '../../../base/avatar';
+import { hideDialog, openDialog } from '../../../base/dialog/actions';
+import BottomSheet from '../../../base/dialog/components/native/BottomSheet';
+import {
+    Icon, IconCloseCircle, IconMessage,
+    IconMicrophoneEmptySlash,
+    IconMuteEveryoneElse, IconVideoOff
+} from '../../../base/icons';
+import {
+    getLocalParticipant,
+    getParticipantByIdOrUndefined,
+    getParticipantDisplayName, getRemoteParticipants,
+    isLocalParticipantModerator
+} from '../../../base/participants/functions';
+import { connect } from '../../../base/redux';
+import {
+    isParticipantAudioMuted,
+    isParticipantVideoMuted
+} from '../../../base/tracks/functions';
+import { openChat } from '../../../chat/actions.native';
+import {
+    KickRemoteParticipantDialog,
+    MuteEveryoneDialog,
+    MuteRemoteParticipantDialog,
+    MuteRemoteParticipantsVideoDialog
+} from '../../../video-menu';
+import VolumeSlider from '../../../video-menu/components/native/VolumeSlider';
+
+import styles from './styles';
+
+type Props = {
+
+    /**
+     * The display name of the participant.
+     */
+    _displayName: string,
+
+    /**
+     * True if the local participant is moderator and false otherwise.
+     */
+    _isLocalModerator: boolean,
+
+    /**
+     * True if the participant is moderator and false otherwise.
+     */
+    _isParticipantModerator: boolean,
+
+    /**
+     * True if the participant is video muted and false otherwise.
+     */
+    _isParticipantVideoMuted: boolean,
+
+    /**
+     * True if the participant is audio muted and false otherwise.
+     */
+    _isParticipantAudioMuted: boolean,
+
+    /**
+     * Whether the participant is present in the room or not.
+     */
+    _isParticipantIDAvailable?: boolean,
+
+    /**
+     * Participant reference
+     */
+    _participant: Object,
+
+    /**
+     * The ID of the participant.
+     */
+    participantID: string,
+};
+
+const ContextMenuMeetingParticipantDetails = (
+        {
+            _displayName,
+            _isLocalModerator,
+            _isParticipantVideoMuted,
+            _isParticipantAudioMuted,
+            _participant,
+            _isParticipantIDAvailable,
+            participantID
+        }: Props) => {
+    const dispatch = useDispatch();
+    const cancel = useCallback(() => dispatch(hideDialog()), [ dispatch ]);
+    const kickRemoteParticipant = useCallback(() => {
+        dispatch(openDialog(KickRemoteParticipantDialog, {
+            participantID
+        }));
+    }, [ dispatch, participantID ]);
+    const muteAudio = useCallback(() => {
+        dispatch(openDialog(MuteRemoteParticipantDialog, {
+            participantID
+        }));
+    }, [ dispatch, participantID ]);
+    const muteEveryoneElse = useCallback(() => {
+        dispatch(openDialog(MuteEveryoneDialog, {
+            exclude: [ participantID ]
+        }));
+    }, [ dispatch, participantID ]);
+    const muteVideo = useCallback(() => {
+        dispatch(openDialog(MuteRemoteParticipantsVideoDialog, {
+            participantID
+        }));
+    }, [ dispatch, participantID ]);
+
+    const sendPrivateMessage = useCallback(() => {
+        dispatch(hideDialog());
+        dispatch(openChat(_participant));
+    }, [ dispatch, _participant ]);
+    const { t } = useTranslation();
+
+    return (
+        <BottomSheet
+            addScrollViewPadding = { false }
+            onCancel = { cancel }
+            showSlidingView = { _isParticipantIDAvailable }
+            style = { styles.contextMenuMeetingParticipantDetails }>
+            <View
+                style = { styles.contextMenuItemSectionAvatar }>
+                <Avatar
+                    className = 'participant-avatar'
+                    participantId = { participantID }
+                    size = { 20 } />
+                <View style = { styles.contextMenuItemAvatarText }>
+                    <Text style = { styles.contextMenuItemName }>
+                        { _displayName }
+                    </Text>
+                </View>
+            </View>
+            <Divider style = { styles.divider } />
+            {
+                _isLocalModerator && (
+                    <>
+                        {
+                            !_isParticipantAudioMuted
+                            && <TouchableOpacity
+                                onPress = { muteAudio }
+                                style = { styles.contextMenuItem }>
+                                <Icon
+                                    size = { 20 }
+                                    src = { IconMicrophoneEmptySlash } />
+                                <Text style = { styles.contextMenuItemText }>
+                                    { t('participantsPane.actions.mute') }
+                                </Text>
+                            </TouchableOpacity>
+                        }
+
+                        <TouchableOpacity
+                            onPress = { muteEveryoneElse }
+                            style = { styles.contextMenuItem }>
+                            <Icon
+                                size = { 20 }
+                                src = { IconMuteEveryoneElse } />
+                            <Text style = { styles.contextMenuItemText }>
+                                { t('participantsPane.actions.muteEveryoneElse') }
+                            </Text>
+                        </TouchableOpacity>
+                    </>
+                )
+            }
+            <Divider style = { styles.divider } />
+            {
+                _isLocalModerator && (
+                    <>
+                        {
+                            !_isParticipantVideoMuted
+                            && <TouchableOpacity
+                                onPress = { muteVideo }
+                                style = { styles.contextMenuItemSection }>
+                                <Icon
+                                    size = { 20 }
+                                    src = { IconVideoOff } />
+                                <Text style = { styles.contextMenuItemText }>
+                                    { t('participantsPane.actions.stopVideo') }
+                                </Text>
+                            </TouchableOpacity>
+                        }
+
+                        <TouchableOpacity
+                            onPress = { kickRemoteParticipant }
+                            style = { styles.contextMenuItem }>
+                            <Icon
+                                size = { 20 }
+                                src = { IconCloseCircle } />
+                            <Text style = { styles.contextMenuItemText }>
+                                { t('videothumbnail.kick') }
+                            </Text>
+                        </TouchableOpacity>
+                    </>
+                )
+            }
+            <TouchableOpacity
+                onPress = { sendPrivateMessage }
+                style = { styles.contextMenuItem }>
+                <Icon
+                    size = { 20 }
+                    src = { IconMessage } />
+                <Text style = { styles.contextMenuItemText }>
+                    { t('toolbar.accessibilityLabel.privateMessage') }
+                </Text>
+            </TouchableOpacity>
+            {/* We need design specs for this*/}
+            {/* <TouchableOpacity*/}
+            {/*    style = { styles.contextMenuItemSection }>*/}
+            {/*    <Icon*/}
+            {/*        size = { 20 }*/}
+            {/*        src = { IconConnectionActive }*/}
+            {/*        style = { styles.contextMenuItemIcon } />*/}
+            {/*    <Text style = { styles.contextMenuItemText }>{ t('participantsPane.actions.networkStats') }</Text>*/}
+            {/* </TouchableOpacity>*/}
+            <Divider style = { styles.divider } />
+            <VolumeSlider participantID = { participantID } />
+        </BottomSheet>
+    );
+};
+
+
+/**
+ * Maps (parts of) the redux state to the associated props for this component.
+ *
+ * @param {Object} state - The Redux state.
+ * @param {Object} ownProps - The own props of the component.
+ * @private
+ * @returns {Props}
+ */
+function _mapStateToProps(state, ownProps): Object {
+    const { participantID } = ownProps;
+    const participantIDS = [];
+
+    const participant = getParticipantByIdOrUndefined(state, participantID);
+    const _isLocalModerator = isLocalParticipantModerator(state);
+    const _isParticipantVideoMuted = isParticipantVideoMuted(participant, state);
+    const _isParticipantAudioMuted = isParticipantAudioMuted(participant, state);
+    const localParticipant = getLocalParticipant(state);
+    const remoteParticipants = getRemoteParticipants(state);
+
+    localParticipant && participantIDS.push(localParticipant?.id);
+
+    remoteParticipants.forEach(p => {
+        participantIDS.push(p?.id);
+    });
+
+    const isParticipantIDAvailable = participantIDS.find(partID => partID === participantID);
+
+    return {
+        _displayName: getParticipantDisplayName(state, participantID),
+        _isLocalModerator,
+        _isParticipantAudioMuted,
+        _isParticipantIDAvailable: Boolean(isParticipantIDAvailable),
+        _isParticipantVideoMuted,
+        _participant: participant
+    };
+}
+
+export default connect(_mapStateToProps)(ContextMenuMeetingParticipantDetails);
diff --git a/react/features/participants-pane/components/native/ContextMenuMore.js b/react/features/participants-pane/components/native/ContextMenuMore.js
new file mode 100644
index 000000000..f2636be4c
--- /dev/null
+++ b/react/features/participants-pane/components/native/ContextMenuMore.js
@@ -0,0 +1,65 @@
+// @flow
+
+import React, { useCallback } from 'react';
+import { useTranslation } from 'react-i18next';
+import { TouchableOpacity } from 'react-native';
+import { Text } from 'react-native-paper';
+import { useDispatch, useSelector } from 'react-redux';
+
+import { openDialog, hideDialog } from '../../../base/dialog/actions';
+import BottomSheet from '../../../base/dialog/components/native/BottomSheet';
+import {
+    Icon, IconMicDisabledHollow,
+    IconVideoOff
+} from '../../../base/icons';
+import {
+    getLocalParticipant,
+    getParticipantCount
+} from '../../../base/participants';
+import { BlockAudioVideoDialog } from '../../../video-menu';
+import MuteEveryonesVideoDialog
+    from '../../../video-menu/components/native/MuteEveryonesVideoDialog';
+
+import styles from './styles';
+
+export const ContextMenuMore = () => {
+    const dispatch = useDispatch();
+    const blockAudioVideo = useCallback(() => dispatch(openDialog(BlockAudioVideoDialog)), [ dispatch ]);
+    const cancel = useCallback(() => dispatch(hideDialog()), [ dispatch ]);
+    const { id } = useSelector(getLocalParticipant);
+    const participantsCount = useSelector(getParticipantCount);
+    const showSlidingView = participantsCount > 2;
+    const muteAllVideo = useCallback(() =>
+        dispatch(openDialog(MuteEveryonesVideoDialog,
+            { exclude: [ id ] })),
+        [ dispatch ]);
+    const { t } = useTranslation();
+
+    return (
+        <BottomSheet
+            addScrollViewPadding = { false }
+            onCancel = { cancel }
+            showSlidingView = { showSlidingView }
+            style = { styles.contextMenuMore }>
+            <TouchableOpacity
+                onPress = { muteAllVideo }
+                style = { styles.contextMenuItem }>
+                <Icon
+                    size = { 20 }
+                    src = { IconVideoOff } />
+                <Text style = { styles.contextMenuItemText }>{t('participantsPane.actions.stopEveryonesVideo')}</Text>
+            </TouchableOpacity>
+            <TouchableOpacity
+                onPress = { blockAudioVideo }
+                style = { styles.contextMenuItem }>
+                <Icon
+                    size = { 20 }
+                    src = { IconMicDisabledHollow }
+                    style = { styles.contextMenuIcon } />
+                <Text style = { styles.contextMenuItemText }>
+                    {t('participantsPane.actions.blockEveryoneMicCamera')}
+                </Text>
+            </TouchableOpacity>
+        </BottomSheet>
+    );
+};
diff --git a/react/features/participants-pane/components/native/LobbyParticipantItem.js b/react/features/participants-pane/components/native/LobbyParticipantItem.js
new file mode 100644
index 000000000..198f1247d
--- /dev/null
+++ b/react/features/participants-pane/components/native/LobbyParticipantItem.js
@@ -0,0 +1,49 @@
+// @flow
+
+import React, { useCallback } from 'react';
+import { useTranslation } from 'react-i18next';
+import { Button } from 'react-native-paper';
+import { useDispatch } from 'react-redux';
+
+import { approveKnockingParticipant } from '../../../lobby/actions.native';
+import { showContextMenuReject } from '../../actions.native';
+import { MEDIA_STATE } from '../../constants';
+
+import ParticipantItem from './ParticipantItem';
+import styles from './styles';
+
+type Props = {
+
+    /**
+     * Participant reference
+     */
+    participant: Object
+};
+
+export const LobbyParticipantItem = ({ participant: p }: Props) => {
+    const dispatch = useDispatch();
+    const admit = useCallback(() => dispatch(approveKnockingParticipant(p.id), [ dispatch ]));
+    const openContextMenuReject = useCallback(() => dispatch(showContextMenuReject(p), [ dispatch ]));
+    const { t } = useTranslation();
+
+    return (
+        <ParticipantItem
+            audioMediaState = { MEDIA_STATE.NONE }
+            displayName = { p.name }
+            isKnockingParticipant = { true }
+            local = { p.local }
+            onPress = { openContextMenuReject }
+            participant = { p }
+            participantID = { p.id }
+            raisedHand = { p.raisedHand }
+            videoMediaState = { MEDIA_STATE.NONE }>
+            <Button
+                children = { t('lobby.admit') }
+                contentStyle = { styles.participantActionsButtonContent }
+                labelStyle = { styles.participantActionsButtonText }
+                mode = 'contained'
+                onPress = { admit }
+                style = { styles.participantActionsButtonAdmit } />
+        </ParticipantItem>
+    );
+};
diff --git a/react/features/participants-pane/components/native/LobbyParticipantList.js b/react/features/participants-pane/components/native/LobbyParticipantList.js
new file mode 100644
index 000000000..fe935ac49
--- /dev/null
+++ b/react/features/participants-pane/components/native/LobbyParticipantList.js
@@ -0,0 +1,56 @@
+// @flow
+
+import React, { useCallback } from 'react';
+import { useTranslation } from 'react-i18next';
+import { Text, View } from 'react-native';
+import { Button } from 'react-native-paper';
+import { useDispatch, useSelector } from 'react-redux';
+
+import { admitMultiple } from '../../../lobby/actions.native';
+import { getLobbyState } from '../../../lobby/functions';
+
+import { LobbyParticipantItem } from './LobbyParticipantItem';
+import styles from './styles';
+
+export const LobbyParticipantList = () => {
+    const {
+        lobbyEnabled,
+        knockingParticipants: participants
+    } = useSelector(getLobbyState);
+
+    const dispatch = useDispatch();
+    const admitAll = useCallback(() =>
+        dispatch(admitMultiple(participants)),
+        [ dispatch ]);
+    const { t } = useTranslation();
+
+    if (!lobbyEnabled || !participants.length) {
+        return null;
+    }
+
+    return (
+        <View style = { styles.lobbyList }>
+            <View style = { styles.lobbyListDetails } >
+                <Text style = { styles.lobbyListDescription }>
+                    {t('participantsPane.headings.waitingLobby',
+                        { count: participants.length })}
+                </Text>
+                <Button
+                    color = '#3D3D3D'
+                    labelStyle = { styles.admitAllParticipantsActionButtonLabel }
+                    mode = 'text'
+                    onPress = { admitAll }
+                    style = { styles.admitAllParticipantsActionButton }>
+                    {t('lobby.admitAll')}
+                </Button>
+            </View>
+            {
+                participants.map(p => (
+                    <LobbyParticipantItem
+                        key = { p.id }
+                        participant = { p } />)
+                )
+            }
+        </View>
+    );
+};
diff --git a/react/features/participants-pane/components/native/MeetingParticipantItem.js b/react/features/participants-pane/components/native/MeetingParticipantItem.js
new file mode 100644
index 000000000..86f660d0e
--- /dev/null
+++ b/react/features/participants-pane/components/native/MeetingParticipantItem.js
@@ -0,0 +1,124 @@
+// @flow
+
+import React from 'react';
+
+import { translate } from '../../../base/i18n';
+import {
+    getParticipantByIdOrUndefined,
+    getParticipantDisplayName
+} from '../../../base/participants';
+import { connect } from '../../../base/redux';
+import {
+    isParticipantAudioMuted,
+    isParticipantVideoMuted
+} from '../../../base/tracks';
+import { MEDIA_STATE } from '../../constants';
+import type { MediaState } from '../../constants';
+import { getParticipantAudioMediaState } from '../../functions';
+
+import ParticipantItem from './ParticipantItem';
+
+
+type Props = {
+
+    /**
+     * Media state for audio.
+     */
+    _audioMediaState: MediaState,
+
+    /**
+     * The display name of the participant.
+     */
+    _displayName: string,
+
+    /**
+     * True if the participant is video muted.
+     */
+    _isVideoMuted: boolean,
+
+    /**
+     * True if the participant is the local participant.
+     */
+    _local: boolean,
+
+    /**
+     * The participant ID.
+     */
+    _participantID: string,
+
+    /**
+     * True if the participant have raised hand.
+     */
+    _raisedHand: boolean,
+
+    /**
+     * Callback to invoke when item is pressed.
+     */
+    onPress: Function,
+
+    /**
+     * The ID of the participant.
+     */
+    participantID: ?string
+};
+
+/**
+ * Implements the MeetingParticipantItem component.
+ *
+ * @param {Props} props - The props of the component.
+ * @returns {ReactElement}
+ */
+function MeetingParticipantItem({
+    _audioMediaState,
+    _displayName,
+    _isVideoMuted,
+    _local,
+    _participantID,
+    _raisedHand,
+    onPress
+}: Props) {
+    return (
+        <ParticipantItem
+            audioMediaState = { _audioMediaState }
+            displayName = { _displayName }
+            isKnockingParticipant = { false }
+            local = { _local }
+            onPress = { onPress }
+            participantID = { _participantID }
+            raisedHand = { _raisedHand }
+            videoMediaState = { _isVideoMuted ? MEDIA_STATE.MUTED : MEDIA_STATE.UNMUTED } />
+    );
+}
+
+/**
+ * Maps (parts of) the redux state to the associated props for this component.
+ *
+ * @param {Object} state - The Redux state.
+ * @param {Object} ownProps - The own props of the component.
+ * @private
+ * @returns {Props}
+ */
+function mapStateToProps(state, ownProps): Object {
+    const { participantID } = ownProps;
+    const participant = getParticipantByIdOrUndefined(state, participantID);
+    const _isAudioMuted = isParticipantAudioMuted(participant, state);
+    const isVideoMuted = isParticipantVideoMuted(participant, state);
+    const audioMediaState = getParticipantAudioMediaState(
+        participant, _isAudioMuted, state
+    );
+
+    return {
+        _audioMediaState: audioMediaState,
+        _displayName: getParticipantDisplayName(state, participant?.id),
+        _isAudioMuted,
+        _isVideoMuted: isVideoMuted,
+        _local: Boolean(participant?.local),
+        _participantID: participant?.id,
+        _raisedHand: Boolean(participant?.raisedHand)
+    };
+}
+
+
+export default translate(connect(mapStateToProps)(MeetingParticipantItem));
+
+
diff --git a/react/features/participants-pane/components/native/MeetingParticipantList.js b/react/features/participants-pane/components/native/MeetingParticipantList.js
new file mode 100644
index 000000000..8a8ac9a05
--- /dev/null
+++ b/react/features/participants-pane/components/native/MeetingParticipantList.js
@@ -0,0 +1,72 @@
+// @flow
+
+import React, { useCallback } from 'react';
+import { useTranslation } from 'react-i18next';
+import { Text, View } from 'react-native';
+import { Button } from 'react-native-paper';
+import { useDispatch, useSelector } from 'react-redux';
+
+import { Icon, IconInviteMore } from '../../../base/icons';
+import {
+    getLocalParticipant,
+    getParticipantCountWithFake,
+    getRemoteParticipants
+} from '../../../base/participants';
+import { doInvitePeople } from '../../../invite/actions.native';
+import { showContextMenuDetails } from '../../actions.native';
+import { shouldRenderInviteButton } from '../../functions';
+
+import MeetingParticipantItem from './MeetingParticipantItem';
+import styles from './styles';
+
+export const MeetingParticipantList = () => {
+    const dispatch = useDispatch();
+    const items = [];
+    const localParticipant = useSelector(getLocalParticipant);
+    const onInvite = useCallback(() => dispatch(doInvitePeople()), [ dispatch ]);
+    const participants = useSelector(getRemoteParticipants);
+    const participantsCount = useSelector(getParticipantCountWithFake);
+    const showInviteButton = useSelector(shouldRenderInviteButton);
+    const { t } = useTranslation();
+
+    // eslint-disable-next-line react/no-multi-comp
+    const renderParticipant = id => (
+        <MeetingParticipantItem
+            key = { id }
+            /* eslint-disable-next-line react/jsx-no-bind */
+            onPress = { () => dispatch(showContextMenuDetails(id)) }
+            participantID = { id } />
+    );
+
+    localParticipant && items.push(renderParticipant(localParticipant?.id));
+
+    participants.forEach(p => {
+        items.push(renderParticipant(p?.id));
+    });
+
+    return (
+        <View style = { styles.meetingList }>
+            <Text style = { styles.meetingListDescription }>
+                {t('participantsPane.headings.participantsList',
+                    { count: participantsCount })}
+            </Text>
+            {
+                showInviteButton
+                && <Button
+                    children = { t('participantsPane.actions.invite') }
+                    /* eslint-disable-next-line react/jsx-no-bind */
+                    icon = { () =>
+                        (<Icon
+                            size = { 20 }
+                            src = { IconInviteMore } />)
+                    }
+                    labelStyle = { styles.inviteLabel }
+                    mode = 'contained'
+                    onPress = { onInvite }
+                    style = { styles.inviteButton } />
+            }
+            { items }
+        </View>
+    );
+};
+
diff --git a/react/features/participants-pane/components/native/ParticipantItem.js b/react/features/participants-pane/components/native/ParticipantItem.js
new file mode 100644
index 000000000..2b852aec4
--- /dev/null
+++ b/react/features/participants-pane/components/native/ParticipantItem.js
@@ -0,0 +1,115 @@
+// @flow
+
+import React from 'react';
+import type { Node } from 'react';
+import { useTranslation } from 'react-i18next';
+import { TouchableOpacity, View } from 'react-native';
+import { Text } from 'react-native-paper';
+
+import { Avatar } from '../../../base/avatar';
+import { MEDIA_STATE, type MediaState, AudioStateIcons, VideoStateIcons } from '../../constants';
+
+import { RaisedHandIndicator } from './RaisedHandIndicator';
+import styles from './styles';
+
+type Props = {
+
+    /**
+     * Media state for audio
+     */
+    audioMediaState: MediaState,
+
+    /**
+     * React children
+     */
+    children?: Node,
+
+    /**
+     * The name of the participant. Used for showing lobby names.
+     */
+    displayName: string,
+
+    /**
+     * Is the participant waiting?
+     */
+    isKnockingParticipant: boolean,
+
+    /**
+     * True if the participant is local.
+     */
+    local: boolean,
+
+    /**
+     * Callback to be invoked on pressing the participant item.
+     */
+    onPress?: Function,
+
+    /**
+     * The ID of the participant.
+     */
+    participantID: string,
+
+    /**
+     * True if the participant have raised hand.
+     */
+    raisedHand: boolean,
+
+    /**
+     * Media state for video
+     */
+    videoMediaState: MediaState
+}
+
+/**
+ * Participant item.
+ *
+ * @returns {React$Element<any>}
+ */
+function ParticipantItem({
+    children,
+    displayName,
+    isKnockingParticipant,
+    local,
+    onPress,
+    participantID,
+    raisedHand,
+    audioMediaState = MEDIA_STATE.NONE,
+    videoMediaState = MEDIA_STATE.NONE
+}: Props) {
+
+    const { t } = useTranslation();
+
+    return (
+        <View style = { styles.participantContainer } >
+            <TouchableOpacity
+                onPress = { onPress }
+                style = { styles.participantContent }>
+                <Avatar
+                    className = 'participant-avatar'
+                    participantId = { participantID }
+                    size = { 32 } />
+                <View style = { styles.participantNameContainer }>
+                    <Text style = { styles.participantName }>
+                        { displayName }
+                    </Text>
+                    { local ? <Text style = { styles.isLocal }>({t('chat.you')})</Text> : null }
+                </View>
+                {
+                    !isKnockingParticipant
+                    && <>
+                        {
+                            raisedHand && <RaisedHandIndicator />
+                        }
+                        <View style = { styles.participantStatesContainer }>
+                            <View style = { styles.participantStateVideo }>{VideoStateIcons[videoMediaState]}</View>
+                            <View>{AudioStateIcons[audioMediaState]}</View>
+                        </View>
+                    </>
+                }
+            </TouchableOpacity>
+            { !local && children }
+        </View>
+    );
+}
+
+export default ParticipantItem;
diff --git a/react/features/participants-pane/components/native/ParticipantsPane.js b/react/features/participants-pane/components/native/ParticipantsPane.js
new file mode 100644
index 000000000..9c07e636e
--- /dev/null
+++ b/react/features/participants-pane/components/native/ParticipantsPane.js
@@ -0,0 +1,91 @@
+// @flow
+
+import React, { useCallback } from 'react';
+import { useTranslation } from 'react-i18next';
+import { ScrollView, View } from 'react-native';
+import { Button } from 'react-native-paper';
+import { useDispatch, useSelector } from 'react-redux';
+
+import { openDialog } from '../../../base/dialog';
+import { Icon, IconClose, IconHorizontalPoints } from '../../../base/icons';
+import { JitsiModal } from '../../../base/modal';
+import {
+    getParticipantCount,
+    isLocalParticipantModerator
+} from '../../../base/participants';
+import MuteEveryoneDialog
+    from '../../../video-menu/components/native/MuteEveryoneDialog';
+import { close } from '../../actions.native';
+
+import { ContextMenuMore } from './ContextMenuMore';
+import { LobbyParticipantList } from './LobbyParticipantList';
+import { MeetingParticipantList } from './MeetingParticipantList';
+import styles from './styles';
+
+/**
+ * Participant pane.
+ *
+ * @returns {React$Element<any>}
+ */
+const ParticipantsPane = () => {
+    const dispatch = useDispatch();
+    const openMoreMenu = useCallback(() => dispatch(openDialog(ContextMenuMore)), [ dispatch ]);
+    const closePane = useCallback(() => dispatch(close()), [ dispatch ]);
+    const isLocalModerator = useSelector(isLocalParticipantModerator);
+    const participantsCount = useSelector(getParticipantCount);
+    const showContextMenu = participantsCount > 2;
+    const muteAll = useCallback(() => dispatch(openDialog(MuteEveryoneDialog)),
+        [ dispatch ]);
+    const { t } = useTranslation();
+
+    return (
+        <JitsiModal
+            hideHeaderWithNavigation = { true }
+            style = { styles.participantsPane }>
+            <View style = { styles.header }>
+                <Button
+                    /* eslint-disable-next-line react/jsx-no-bind */
+                    icon = { () =>
+                        (<Icon
+                            size = { 20 }
+                            src = { IconClose } />)
+                    }
+                    labelStyle = { styles.closeIcon }
+                    mode = 'contained'
+                    onPress = { closePane }
+                    style = { styles.closeButton } />
+            </View>
+            <ScrollView>
+                <LobbyParticipantList />
+                <MeetingParticipantList />
+            </ScrollView>
+            {
+                isLocalModerator
+                && <View style = { styles.footer }>
+                    <Button
+                        children = { t('participantsPane.actions.muteAll') }
+                        labelStyle = { styles.muteAllLabel }
+                        mode = 'contained'
+                        onPress = { muteAll }
+                        style = { showContextMenu ? styles.muteAllMoreButton : styles.muteAllButton } />
+                    {
+                        showContextMenu
+                        && <Button
+                            /* eslint-disable-next-line react/jsx-no-bind */
+                            icon = { () =>
+                                (<Icon
+                                    size = { 20 }
+                                    src = { IconHorizontalPoints } />)
+                            }
+                            labelStyle = { styles.moreIcon }
+                            mode = 'contained'
+                            onPress = { openMoreMenu }
+                            style = { styles.moreButton } />
+                    }
+                </View>
+            }
+        </JitsiModal>
+    );
+};
+
+export default ParticipantsPane;
diff --git a/react/features/participants-pane/components/native/ParticipantsPaneButton.js b/react/features/participants-pane/components/native/ParticipantsPaneButton.js
new file mode 100644
index 000000000..388ea8005
--- /dev/null
+++ b/react/features/participants-pane/components/native/ParticipantsPaneButton.js
@@ -0,0 +1,41 @@
+// @flow
+
+import type { Dispatch } from 'redux';
+
+import { translate } from '../../../base/i18n';
+import { IconParticipants } from '../../../base/icons';
+import { connect } from '../../../base/redux';
+import { AbstractButton, type AbstractButtonProps } from '../../../base/toolbox/components';
+import { open } from '../../actions.native';
+
+type Props = AbstractButtonProps & {
+
+    /**
+     * The redux {@code dispatch} function.
+     */
+    dispatch: Dispatch<any>
+};
+
+
+/**
+ * Implements an {@link AbstractButton} to open the participants panel.
+ */
+class ParticipantsPaneButton extends AbstractButton<Props, *> {
+    accessibilityLabel = 'toolbar.accessibilityLabel.participants';
+    icon = IconParticipants;
+    label = 'toolbar.participants';
+
+    /**
+     * Handles clicking / pressing the button, and opens the participants panel.
+     *
+     * @private
+     * @returns {void}
+     */
+    _handleClick() {
+        const { dispatch } = this.props;
+
+        dispatch(open());
+    }
+}
+
+export default translate(connect()(ParticipantsPaneButton));
diff --git a/react/features/participants-pane/components/native/RaisedHandIndicator.js b/react/features/participants-pane/components/native/RaisedHandIndicator.js
new file mode 100644
index 000000000..dbc464473
--- /dev/null
+++ b/react/features/participants-pane/components/native/RaisedHandIndicator.js
@@ -0,0 +1,15 @@
+import React from 'react';
+import { View } from 'react-native';
+
+import { Icon, IconRaisedHandHollow } from '../../../base/icons';
+
+import styles from './styles';
+
+export const RaisedHandIndicator = () => (
+    <View style = { styles.raisedHandIndicator }>
+        <Icon
+            size = { 15 }
+            src = { IconRaisedHandHollow }
+            style = { styles.raisedHandIcon } />
+    </View>
+);
diff --git a/react/features/participants-pane/components/native/index.js b/react/features/participants-pane/components/native/index.js
new file mode 100644
index 000000000..425247373
--- /dev/null
+++ b/react/features/participants-pane/components/native/index.js
@@ -0,0 +1,6 @@
+// @flow
+
+export { default as ParticipantsPane } from './ParticipantsPane';
+export { default as ParticipantsPaneButton } from './ParticipantsPaneButton';
+export { default as ContextMenuLobbyParticipantReject } from './ContextMenuLobbyParticipantReject';
+export { default as ContextMenuMeetingParticipantDetails } from './ContextMenuMeetingParticipantDetails';
diff --git a/react/features/participants-pane/components/native/styles.js b/react/features/participants-pane/components/native/styles.js
new file mode 100644
index 000000000..6a66daa9b
--- /dev/null
+++ b/react/features/participants-pane/components/native/styles.js
@@ -0,0 +1,347 @@
+import BaseTheme from '../../../base/ui/components/BaseTheme.native';
+
+/**
+ * The style for participant list description.
+ */
+const participantListDescription = {
+    ...BaseTheme.typography.heading6,
+    color: BaseTheme.palette.text02,
+    paddingBottom: BaseTheme.spacing[3],
+    paddingTop: BaseTheme.spacing[3],
+    position: 'relative',
+    width: '55%'
+};
+
+/**
+ * The style for content.
+ */
+const flexContent = {
+    alignItems: 'center',
+    color: BaseTheme.palette.icon01,
+    display: 'flex',
+    flex: 1
+};
+
+/**
+ * The style for the context menu items text.
+ */
+const contextMenuItemText = {
+    ...BaseTheme.typography.bodyShortRegularLarge,
+    color: BaseTheme.palette.text01
+};
+
+/**
+ * The style of the participants pane buttons.
+ */
+export const button = {
+    backgroundColor: BaseTheme.palette.action02,
+    borderRadius: BaseTheme.shape.borderRadius,
+    display: 'flex',
+    flexDirection: 'row',
+    justifyContent: 'center',
+    minWidth: 0
+};
+
+/**
+ * Small buttons.
+ */
+const smallButton = {
+    ...button,
+    height: BaseTheme.spacing[7],
+    width: BaseTheme.spacing[7]
+};
+
+/**
+ * Mute all button.
+ */
+const muteAllButton = {
+    ...button,
+    marginLeft: 'auto'
+};
+
+/**
+ * The style of the participants pane buttons description.
+ */
+const buttonContent = {
+    ...BaseTheme.typography.labelButton,
+    alignContent: 'center',
+    color: BaseTheme.palette.text01,
+    display: 'flex',
+    justifyContent: 'center'
+};
+
+/**
+ * The style of the context menu pane items.
+ */
+const contextMenuItem = {
+    alignItems: 'center',
+    display: 'flex',
+    flexDirection: 'row',
+    height: BaseTheme.spacing[7],
+    marginLeft: BaseTheme.spacing[3],
+    marginTop: BaseTheme.spacing[2]
+};
+
+/**
+ * The styles of the native components of the feature {@code participants}.
+ */
+export default {
+
+    participantActionsButtonAdmit: {
+        backgroundColor: BaseTheme.palette.action01,
+        borderRadius: BaseTheme.shape.borderRadius,
+        flexDirection: 'row',
+        height: BaseTheme.spacing[6],
+        marginRight: BaseTheme.spacing[3],
+        position: 'absolute',
+        right: 0,
+        zIndex: 1
+    },
+
+    participantActionsButtonContent: {
+        alignItems: 'center',
+        display: 'flex',
+        height: BaseTheme.spacing[5],
+        top: BaseTheme.spacing[1]
+    },
+
+    participantActionsButtonText: {
+        color: BaseTheme.palette.text01,
+        textTransform: 'capitalize'
+    },
+
+    admitAllParticipantsActionButtonLabel: {
+        ...BaseTheme.typography.heading6,
+        color: BaseTheme.palette.link01,
+        textTransform: 'capitalize'
+    },
+
+    admitAllParticipantsActionButton: {
+        marginLeft: 'auto'
+    },
+
+    participantContainer: {
+        alignItems: 'center',
+        borderBottomColor: BaseTheme.palette.field01Hover,
+        borderBottomWidth: 2,
+        display: 'flex',
+        flexDirection: 'row',
+        height: BaseTheme.spacing[9],
+        paddingLeft: BaseTheme.spacing[3],
+        paddingRight: BaseTheme.spacing[3],
+        width: '100%'
+    },
+
+    participantContent: {
+        alignItems: 'center',
+        display: 'flex',
+        flexDirection: 'row',
+        height: '100%',
+        overflow: 'hidden',
+        width: '100%'
+    },
+
+    participantNameContainer: {
+        display: 'flex',
+        flexDirection: 'row',
+        overflow: 'hidden',
+        paddingLeft: BaseTheme.spacing[2],
+        width: '63%'
+    },
+
+    participantName: {
+        overflow: 'hidden',
+        color: BaseTheme.palette.text01
+    },
+
+    isLocal: {
+        alignSelf: 'center',
+        color: BaseTheme.palette.text01,
+        marginLeft: 4
+    },
+
+    participantsPane: {
+        backgroundColor: BaseTheme.palette.ui01
+    },
+
+    participantStatesContainer: {
+        display: 'flex',
+        flexDirection: 'row',
+        marginLeft: 'auto',
+        width: '15%'
+    },
+
+    participantStateVideo: {
+        paddingRight: BaseTheme.spacing[3]
+    },
+
+    raisedHandIndicator: {
+        backgroundColor: BaseTheme.palette.warning02,
+        borderRadius: BaseTheme.shape.borderRadius / 2,
+        height: BaseTheme.spacing[4],
+        marginLeft: BaseTheme.spacing[2],
+        width: BaseTheme.spacing[4]
+    },
+
+    raisedHandIcon: {
+        ...flexContent,
+        top: BaseTheme.spacing[1]
+    },
+    lobbyList: {
+        position: 'relative'
+    },
+
+    meetingList: {
+        position: 'relative',
+        marginTop: BaseTheme.spacing[3]
+    },
+
+    lobbyListDetails: {
+        alignItems: 'center',
+        display: 'flex',
+        flexDirection: 'row',
+        justifyContent: 'space-between',
+        overflow: 'hidden',
+        paddingLeft: BaseTheme.spacing[3],
+        position: 'relative',
+        width: '100%'
+    },
+
+    lobbyListDescription: {
+        ...participantListDescription
+    },
+
+    meetingListDescription: {
+        ...participantListDescription,
+        marginLeft: BaseTheme.spacing[3]
+    },
+
+    header: {
+        alignItems: 'center',
+        backgroundColor: BaseTheme.palette.ui01,
+        top: BaseTheme.spacing[0],
+        display: 'flex',
+        flexDirection: 'row',
+        height: BaseTheme.spacing[10],
+        paddingRight: BaseTheme.spacing[3],
+        position: 'relative',
+        right: BaseTheme.spacing[0],
+        left: BaseTheme.spacing[0]
+    },
+
+    footer: {
+        alignItems: 'center',
+        backgroundColor: BaseTheme.palette.ui01,
+        bottom: BaseTheme.spacing[0],
+        display: 'flex',
+        flexDirection: 'row',
+        height: BaseTheme.spacing[10],
+        justifyContent: 'space-between',
+        paddingRight: BaseTheme.spacing[3],
+        position: 'relative',
+        right: BaseTheme.spacing[0],
+        left: BaseTheme.spacing[0]
+    },
+
+    closeButton: {
+        ...smallButton,
+        marginLeft: 'auto'
+    },
+
+    closeIcon: {
+        ...buttonContent,
+        height: BaseTheme.spacing[5],
+        marginLeft: 'auto'
+    },
+
+    inviteButton: {
+        backgroundColor: BaseTheme.palette.action01,
+        marginTop: BaseTheme.spacing[2],
+        marginLeft: BaseTheme.spacing[3],
+        marginRight: BaseTheme.spacing[3]
+    },
+
+    inviteLabel: {
+        ...BaseTheme.typography.labelButtonLarge,
+        textTransform: 'capitalize'
+    },
+
+    moreButton: {
+        ...smallButton
+    },
+
+    moreIcon: {
+        ...buttonContent,
+        height: BaseTheme.spacing[5],
+        marginLeft: 'auto'
+    },
+
+    contextMenuMore: {
+        backgroundColor: BaseTheme.palette.action02,
+        borderRadius: BaseTheme.shape.borderRadius
+    },
+
+    contextMenuMeetingParticipantDetails: {
+        backgroundColor: BaseTheme.palette.action02,
+        borderRadius: BaseTheme.shape.borderRadius
+    },
+
+    muteAllButton: {
+        ...muteAllButton
+    },
+
+    muteAllMoreButton: {
+        ...muteAllButton,
+        right: BaseTheme.spacing[3]
+    },
+
+    muteAllLabel: {
+        ...BaseTheme.typography.labelButtonLarge,
+        color: BaseTheme.palette.text01,
+        height: BaseTheme.spacing[7],
+        marginVertical: BaseTheme.spacing[0],
+        marginHorizontal: BaseTheme.spacing[0],
+        paddingTop: 12,
+        paddingBottom: 12,
+        paddingRight: BaseTheme.spacing[3],
+        paddingLeft: BaseTheme.spacing[3],
+        textTransform: 'capitalize',
+        width: 94
+    },
+
+    contextMenuItem: {
+        ...contextMenuItem
+    },
+
+    contextMenuItemSection: {
+        ...contextMenuItem
+    },
+
+    contextMenuItemSectionAvatar: {
+        ...contextMenuItem,
+        marginLeft: BaseTheme.spacing[3]
+    },
+
+    contextMenuItemAvatarText: {
+        ...contextMenuItemText,
+        marginLeft: BaseTheme.spacing[3]
+    },
+
+    contextMenuItemText: {
+        ...contextMenuItemText,
+        marginLeft: BaseTheme.spacing[3]
+    },
+
+    contextMenuItemName: {
+        ...BaseTheme.typography.bodyShortRegularLarge,
+        color: BaseTheme.palette.text01
+    },
+
+    contextMenuIcon: {
+        color: BaseTheme.palette.actionDanger
+    },
+
+    divider: {
+        backgroundColor: BaseTheme.palette.section01
+    }
+};
diff --git a/react/features/participants-pane/components/web/InviteButton.js b/react/features/participants-pane/components/web/InviteButton.js
new file mode 100644
index 000000000..d72a8f92a
--- /dev/null
+++ b/react/features/participants-pane/components/web/InviteButton.js
@@ -0,0 +1,32 @@
+// @flow
+
+import React, { useCallback } from 'react';
+import { useTranslation } from 'react-i18next';
+import { useDispatch } from 'react-redux';
+
+import { createToolbarEvent, sendAnalytics } from '../../../analytics';
+import { Icon, IconInviteMore } from '../../../base/icons';
+import { beginAddPeople } from '../../../invite';
+
+import { ParticipantInviteButton } from './styled';
+
+export const InviteButton = () => {
+    const dispatch = useDispatch();
+    const { t } = useTranslation();
+
+    const onInvite = useCallback(() => {
+        sendAnalytics(createToolbarEvent('invite'));
+        dispatch(beginAddPeople());
+    }, [ dispatch ]);
+
+    return (
+        <ParticipantInviteButton
+            aria-label = { t('participantsPane.actions.invite') }
+            onClick = { onInvite }>
+            <Icon
+                size = { 20 }
+                src = { IconInviteMore } />
+            <span>{t('participantsPane.actions.invite')}</span>
+        </ParticipantInviteButton>
+    );
+};
diff --git a/react/features/participants-pane/components/web/LobbyParticipantItem.js b/react/features/participants-pane/components/web/LobbyParticipantItem.js
new file mode 100644
index 000000000..6c0c43e6a
--- /dev/null
+++ b/react/features/participants-pane/components/web/LobbyParticipantItem.js
@@ -0,0 +1,48 @@
+// @flow
+
+import React, { useCallback } from 'react';
+import { useTranslation } from 'react-i18next';
+import { useDispatch } from 'react-redux';
+
+import { approveKnockingParticipant, rejectKnockingParticipant } from '../../../lobby/actions';
+import { ACTION_TRIGGER, MEDIA_STATE } from '../../constants';
+
+import ParticipantItem from './ParticipantItem';
+import { ParticipantActionButton } from './styled';
+
+type Props = {
+
+    /**
+     * Participant reference
+     */
+    participant: Object
+};
+
+export const LobbyParticipantItem = ({ participant: p }: Props) => {
+    const dispatch = useDispatch();
+    const admit = useCallback(() => dispatch(approveKnockingParticipant(p.id), [ dispatch ]));
+    const reject = useCallback(() => dispatch(rejectKnockingParticipant(p.id), [ dispatch ]));
+    const { t } = useTranslation();
+
+    return (
+        <ParticipantItem
+            actionsTrigger = { ACTION_TRIGGER.PERMANENT }
+            audioMediaState = { MEDIA_STATE.NONE }
+            displayName = { p.name }
+            local = { p.local }
+            participantID = { p.id }
+            raisedHand = { p.raisedHand }
+            videoMuteState = { MEDIA_STATE.NONE }
+            youText = { t('chat.you') }>
+            <ParticipantActionButton
+                onClick = { reject }>
+                {t('lobby.reject')}
+            </ParticipantActionButton>
+            <ParticipantActionButton
+                onClick = { admit }
+                primary = { true }>
+                {t('lobby.admit')}
+            </ParticipantActionButton>
+        </ParticipantItem>
+    );
+};
diff --git a/react/features/participants-pane/components/web/LobbyParticipantList.js b/react/features/participants-pane/components/web/LobbyParticipantList.js
new file mode 100644
index 000000000..bad4365ce
--- /dev/null
+++ b/react/features/participants-pane/components/web/LobbyParticipantList.js
@@ -0,0 +1,69 @@
+// @flow
+
+import { makeStyles } from '@material-ui/core/styles';
+import React, { useCallback } from 'react';
+import { useTranslation } from 'react-i18next';
+import { useSelector, useDispatch } from 'react-redux';
+
+import { withPixelLineHeight } from '../../../base/styles/functions.web';
+import { admitMultiple } from '../../../lobby/actions.web';
+import { getLobbyState } from '../../../lobby/functions';
+
+import { LobbyParticipantItem } from './LobbyParticipantItem';
+
+const useStyles = makeStyles(theme => {
+    return {
+        headingContainer: {
+            alignItems: 'center',
+            display: 'flex',
+            justifyContent: 'space-between'
+        },
+        heading: {
+            ...withPixelLineHeight(theme.typography.heading7),
+            color: theme.palette.text02
+        },
+        link: {
+            ...withPixelLineHeight(theme.typography.labelBold),
+            color: theme.palette.link01,
+            cursor: 'pointer'
+        }
+    };
+});
+
+
+export const LobbyParticipantList = () => {
+    const {
+        lobbyEnabled,
+        knockingParticipants: participants
+    } = useSelector(getLobbyState);
+    const { t } = useTranslation();
+    const classes = useStyles();
+    const dispatch = useDispatch();
+    const admitAll = useCallback(() => {
+        dispatch(admitMultiple(participants));
+    }, [ dispatch, participants ]);
+
+    if (!lobbyEnabled || !participants.length) {
+        return null;
+    }
+
+    return (
+    <>
+        <div className = { classes.headingContainer }>
+            <div className = { classes.heading }>
+                {t('participantsPane.headings.lobby', { count: participants.length })}
+            </div>
+            <div
+                className = { classes.link }
+                onClick = { admitAll }>{t('lobby.admitAll')}</div>
+        </div>
+        <div>
+            {participants.map(p => (
+                <LobbyParticipantItem
+                    key = { p.id }
+                    participant = { p } />)
+            )}
+        </div>
+    </>
+    );
+};
diff --git a/react/features/participants-pane/components/web/MeetingParticipantContextMenu.js b/react/features/participants-pane/components/web/MeetingParticipantContextMenu.js
new file mode 100644
index 000000000..f92deac75
--- /dev/null
+++ b/react/features/participants-pane/components/web/MeetingParticipantContextMenu.js
@@ -0,0 +1,399 @@
+// @flow
+
+import React, { Component } from 'react';
+
+import { isToolbarButtonEnabled } from '../../../base/config/functions.web';
+import { openDialog } from '../../../base/dialog';
+import { translate } from '../../../base/i18n';
+import {
+    IconCloseCircle,
+    IconCrown,
+    IconMessage,
+    IconMicDisabled,
+    IconMuteEveryoneElse,
+    IconVideoOff
+} from '../../../base/icons';
+import {
+    getParticipantByIdOrUndefined,
+    isLocalParticipantModerator,
+    isParticipantModerator
+} from '../../../base/participants';
+import { connect } from '../../../base/redux';
+import { isParticipantAudioMuted, isParticipantVideoMuted } from '../../../base/tracks';
+import { openChat } from '../../../chat/actions';
+import { GrantModeratorDialog, KickRemoteParticipantDialog, MuteEveryoneDialog } from '../../../video-menu';
+import MuteRemoteParticipantsVideoDialog from '../../../video-menu/components/web/MuteRemoteParticipantsVideoDialog';
+import { getComputedOuterHeight } from '../../functions';
+
+import {
+    ContextMenu,
+    ContextMenuIcon,
+    ContextMenuItem,
+    ContextMenuItemGroup,
+    ignoredChildClassName
+} from './styled';
+
+type Props = {
+
+    /**
+     * True if the local participant is moderator and false otherwise.
+     */
+    _isLocalModerator: boolean,
+
+    /**
+     * True if the chat button is enabled and false otherwise.
+     */
+    _isChatButtonEnabled: boolean,
+
+    /**
+     * True if the participant is moderator and false otherwise.
+     */
+    _isParticipantModerator: boolean,
+
+    /**
+     * True if the participant is video muted and false otherwise.
+     */
+    _isParticipantVideoMuted: boolean,
+
+    /**
+     * True if the participant is audio muted and false otherwise.
+     */
+    _isParticipantAudioMuted: boolean,
+
+    /**
+     * Participant reference
+     */
+    _participant: Object,
+
+    /**
+     * The dispatch function from redux.
+     */
+    dispatch: Function,
+
+    /**
+     * Callback used to open a confirmation dialog for audio muting.
+     */
+    muteAudio: Function,
+
+    /**
+     * Target elements against which positioning calculations are made
+     */
+    offsetTarget: HTMLElement,
+
+    /**
+     * Callback for the mouse entering the component
+     */
+    onEnter: Function,
+
+    /**
+     * Callback for the mouse leaving the component
+     */
+    onLeave: Function,
+
+    /**
+     * Callback for making a selection in the menu
+     */
+    onSelect: Function,
+
+    /**
+     * The ID of the participant.
+     */
+    participantID: string,
+
+    /**
+     * The translate function.
+     */
+    t: Function
+};
+
+type State = {
+
+    /**
+     * If true the context menu will be hidden.
+     */
+    isHidden: boolean
+};
+
+/**
+ * Implements the MeetingParticipantContextMenu component.
+ */
+class MeetingParticipantContextMenu extends Component<Props, State> {
+
+    /**
+     * Reference to the context menu container div.
+     */
+    _containerRef: Object;
+
+    /**
+     * Creates new instance of MeetingParticipantContextMenu.
+     *
+     * @param {Props} props - The props.
+     */
+    constructor(props: Props) {
+        super(props);
+
+        this.state = {
+            isHidden: true
+        };
+
+        this._containerRef = React.createRef();
+
+        this._onGrantModerator = this._onGrantModerator.bind(this);
+        this._onKick = this._onKick.bind(this);
+        this._onMuteEveryoneElse = this._onMuteEveryoneElse.bind(this);
+        this._onMuteVideo = this._onMuteVideo.bind(this);
+        this._onSendPrivateMessage = this._onSendPrivateMessage.bind(this);
+        this._position = this._position.bind(this);
+    }
+
+    _onGrantModerator: () => void;
+
+    /**
+     * Grant moderator permissions.
+     *
+     * @returns {void}
+     */
+    _onGrantModerator() {
+        const { _participant, dispatch } = this.props;
+
+        dispatch(openDialog(GrantModeratorDialog, {
+            participantID: _participant?.id
+        }));
+    }
+
+    _onKick: () => void;
+
+    /**
+     * Kicks the participant.
+     *
+     * @returns {void}
+     */
+    _onKick() {
+        const { _participant, dispatch } = this.props;
+
+        dispatch(openDialog(KickRemoteParticipantDialog, {
+            participantID: _participant?.id
+        }));
+    }
+
+    _onMuteEveryoneElse: () => void;
+
+    /**
+     * Mutes everyone else.
+     *
+     * @returns {void}
+     */
+    _onMuteEveryoneElse() {
+        const { _participant, dispatch } = this.props;
+
+        dispatch(openDialog(MuteEveryoneDialog, {
+            exclude: [ _participant?.id ]
+        }));
+    }
+
+    _onMuteVideo: () => void;
+
+    /**
+     * Mutes the video of the selected participant.
+     *
+     * @returns {void}
+     */
+    _onMuteVideo() {
+        const { _participant, dispatch } = this.props;
+
+        dispatch(openDialog(MuteRemoteParticipantsVideoDialog, {
+            participantID: _participant?.id
+        }));
+    }
+
+    _onSendPrivateMessage: () => void;
+
+    /**
+     * Sends private message.
+     *
+     * @returns {void}
+     */
+    _onSendPrivateMessage() {
+        const { _participant, dispatch } = this.props;
+
+        dispatch(openChat(_participant));
+    }
+
+    _position: () => void;
+
+    /**
+     * Positions the context menu.
+     *
+     * @returns {void}
+     */
+    _position() {
+        const { _participant, offsetTarget } = this.props;
+
+        if (_participant
+            && this._containerRef.current
+            && offsetTarget?.offsetParent
+            && offsetTarget.offsetParent instanceof HTMLElement
+        ) {
+            const { current: container } = this._containerRef;
+            const { offsetTop, offsetParent: { offsetHeight, scrollTop } } = offsetTarget;
+            const outerHeight = getComputedOuterHeight(container);
+
+            container.style.top = offsetTop + outerHeight > offsetHeight + scrollTop
+                ? offsetTop - outerHeight
+                : offsetTop;
+
+            this.setState({ isHidden: false });
+        } else {
+            this.setState({ isHidden: true });
+        }
+    }
+
+    /**
+     * Implements React Component's componentDidMount.
+     *
+     * @inheritdoc
+     * @returns {void}
+     */
+    componentDidMount() {
+        this._position();
+    }
+
+    /**
+     * Implements React Component's componentDidUpdate.
+     *
+     * @inheritdoc
+     */
+    componentDidUpdate(prevProps: Props) {
+        if (prevProps.offsetTarget !== this.props.offsetTarget || prevProps._participant !== this.props._participant) {
+            this._position();
+        }
+    }
+
+    /**
+     * Implements React's {@link Component#render()}.
+     *
+     * @inheritdoc
+     * @returns {ReactElement}
+     */
+    render() {
+        const {
+            _isLocalModerator,
+            _isChatButtonEnabled,
+            _isParticipantModerator,
+            _isParticipantVideoMuted,
+            _isParticipantAudioMuted,
+            _participant,
+            onEnter,
+            onLeave,
+            onSelect,
+            muteAudio,
+            t
+        } = this.props;
+
+        if (!_participant) {
+            return null;
+        }
+
+        return (
+            <ContextMenu
+                className = { ignoredChildClassName }
+                innerRef = { this._containerRef }
+                isHidden = { this.state.isHidden }
+                onClick = { onSelect }
+                onMouseEnter = { onEnter }
+                onMouseLeave = { onLeave }>
+                <ContextMenuItemGroup>
+                    {
+                        _isLocalModerator && (
+                            <>
+                                {
+                                    !_isParticipantAudioMuted
+                                        && <ContextMenuItem onClick = { muteAudio(_participant) }>
+                                            <ContextMenuIcon src = { IconMicDisabled } />
+                                            <span>{t('dialog.muteParticipantButton')}</span>
+                                        </ContextMenuItem>
+                                }
+
+                                <ContextMenuItem onClick = { this._onMuteEveryoneElse }>
+                                    <ContextMenuIcon src = { IconMuteEveryoneElse } />
+                                    <span>{t('toolbar.accessibilityLabel.muteEveryoneElse')}</span>
+                                </ContextMenuItem>
+                            </>
+                        )
+                    }
+
+                    {
+                        _isLocalModerator && (
+                            _isParticipantVideoMuted || (
+                                <ContextMenuItem onClick = { this._onMuteVideo }>
+                                    <ContextMenuIcon src = { IconVideoOff } />
+                                    <span>{t('participantsPane.actions.stopVideo')}</span>
+                                </ContextMenuItem>
+                            )
+                        )
+                    }
+                </ContextMenuItemGroup>
+
+                <ContextMenuItemGroup>
+                    {
+                        _isLocalModerator && (
+                            <>
+                                {
+                                    !_isParticipantModerator && (
+                                        <ContextMenuItem onClick = { this._onGrantModerator }>
+                                            <ContextMenuIcon src = { IconCrown } />
+                                            <span>{t('toolbar.accessibilityLabel.grantModerator')}</span>
+                                        </ContextMenuItem>
+                                    )
+                                }
+                                <ContextMenuItem onClick = { this._onKick }>
+                                    <ContextMenuIcon src = { IconCloseCircle } />
+                                    <span>{ t('videothumbnail.kick') }</span>
+                                </ContextMenuItem>
+                            </>
+                        )
+                    }
+                    {
+                        _isChatButtonEnabled && (
+                            <ContextMenuItem onClick = { this._onSendPrivateMessage }>
+                                <ContextMenuIcon src = { IconMessage } />
+                                <span>{t('toolbar.accessibilityLabel.privateMessage')}</span>
+                            </ContextMenuItem>
+                        )
+                    }
+                </ContextMenuItemGroup>
+            </ContextMenu>
+        );
+    }
+}
+
+/**
+ * Maps (parts of) the redux state to the associated props for this component.
+ *
+ * @param {Object} state - The Redux state.
+ * @param {Object} ownProps - The own props of the component.
+ * @private
+ * @returns {Props}
+ */
+function _mapStateToProps(state, ownProps): Object {
+    const { participantID } = ownProps;
+
+    const participant = getParticipantByIdOrUndefined(state, participantID);
+
+    const _isLocalModerator = isLocalParticipantModerator(state);
+    const _isChatButtonEnabled = isToolbarButtonEnabled('chat', state);
+    const _isParticipantVideoMuted = isParticipantVideoMuted(participant, state);
+    const _isParticipantAudioMuted = isParticipantAudioMuted(participant, state);
+    const _isParticipantModerator = isParticipantModerator(participant);
+
+    return {
+        _isLocalModerator,
+        _isChatButtonEnabled,
+        _isParticipantModerator,
+        _isParticipantVideoMuted,
+        _isParticipantAudioMuted,
+        _participant: participant
+    };
+}
+
+export default translate(connect(_mapStateToProps)(MeetingParticipantContextMenu));
diff --git a/react/features/participants-pane/components/web/MeetingParticipantItem.js b/react/features/participants-pane/components/web/MeetingParticipantItem.js
new file mode 100644
index 000000000..9da0e5768
--- /dev/null
+++ b/react/features/participants-pane/components/web/MeetingParticipantItem.js
@@ -0,0 +1,179 @@
+// @flow
+
+import React from 'react';
+
+import { getParticipantByIdOrUndefined, getParticipantDisplayName } from '../../../base/participants';
+import { connect } from '../../../base/redux';
+import { isParticipantAudioMuted, isParticipantVideoMuted } from '../../../base/tracks';
+import { ACTION_TRIGGER, MEDIA_STATE, type MediaState } from '../../constants';
+import { getParticipantAudioMediaState, getQuickActionButtonType } from '../../functions';
+import ParticipantQuickAction from '../ParticipantQuickAction';
+
+import ParticipantItem from './ParticipantItem';
+import { ParticipantActionEllipsis } from './styled';
+
+type Props = {
+
+    /**
+     * Media state for audio.
+     */
+    _audioMediaState: MediaState,
+
+    /**
+     * The display name of the participant.
+     */
+    _displayName: string,
+
+    /**
+     * True if the participant is video muted.
+     */
+    _isVideoMuted: boolean,
+
+    /**
+     * True if the participant is the local participant.
+     */
+    _local: boolean,
+
+    /**
+     * The participant ID.
+     *
+     * NOTE: This ID may be different from participantID prop in the case when we pass undefined for the local
+     * participant. In this case the local participant ID will be filled trough _participantID prop.
+     */
+    _participantID: string,
+
+    /**
+     * The type of button to be rendered for the quick action.
+     */
+    _quickActionButtonType: string,
+
+    /**
+     * True if the participant have raised hand.
+     */
+    _raisedHand: boolean,
+
+    /**
+     * The translated ask unmute text for the qiuck action buttons.
+     */
+    askUnmuteText: string,
+
+    /**
+     * Is this item highlighted
+     */
+    isHighlighted: boolean,
+
+    /**
+     * Callback used to open a confirmation dialog for audio muting.
+     */
+    muteAudio: Function,
+
+    /**
+     * The translated text for the mute participant button.
+     */
+    muteParticipantButtonText: string,
+
+    /**
+     * Callback for the activation of this item's context menu
+     */
+    onContextMenu: Function,
+
+    /**
+     * Callback for the mouse leaving this item
+     */
+    onLeave: Function,
+
+    /**
+     * The aria-label for the ellipsis action.
+     */
+    participantActionEllipsisLabel: string,
+
+    /**
+     * The ID of the participant.
+     */
+    participantID: ?string,
+
+    /**
+     * The translated "you" text.
+     */
+    youText: string
+};
+
+/**
+ * Implements the MeetingParticipantItem component.
+ *
+ * @param {Props} props - The props of the component.
+ * @returns {ReactElement}
+ */
+function MeetingParticipantItem({
+    _audioMediaState,
+    _displayName,
+    _isVideoMuted,
+    _local,
+    _participantID,
+    _quickActionButtonType,
+    _raisedHand,
+    askUnmuteText,
+    isHighlighted,
+    onContextMenu,
+    onLeave,
+    muteAudio,
+    muteParticipantButtonText,
+    participantActionEllipsisLabel,
+    youText
+}: Props) {
+    return (
+        <ParticipantItem
+            actionsTrigger = { ACTION_TRIGGER.HOVER }
+            audioMediaState = { _audioMediaState }
+            displayName = { _displayName }
+            isHighlighted = { isHighlighted }
+            local = { _local }
+            onLeave = { onLeave }
+            participantID = { _participantID }
+            raisedHand = { _raisedHand }
+            videoMuteState = { _isVideoMuted ? MEDIA_STATE.MUTED : MEDIA_STATE.UNMUTED }
+            youText = { youText }>
+            <ParticipantQuickAction
+                askUnmuteText = { askUnmuteText }
+                buttonType = { _quickActionButtonType }
+                muteAudio = { muteAudio }
+                muteParticipantButtonText = { muteParticipantButtonText }
+                participantID = { _participantID } />
+            <ParticipantActionEllipsis
+                aria-label = { participantActionEllipsisLabel }
+                onClick = { onContextMenu } />
+        </ParticipantItem>
+    );
+}
+
+/**
+ * Maps (parts of) the redux state to the associated props for this component.
+ *
+ * @param {Object} state - The Redux state.
+ * @param {Object} ownProps - The own props of the component.
+ * @private
+ * @returns {Props}
+ */
+function _mapStateToProps(state, ownProps): Object {
+    const { participantID } = ownProps;
+
+    const participant = getParticipantByIdOrUndefined(state, participantID);
+
+    const _isAudioMuted = isParticipantAudioMuted(participant, state);
+    const _isVideoMuted = isParticipantVideoMuted(participant, state);
+    const _audioMediaState = getParticipantAudioMediaState(participant, _isAudioMuted, state);
+    const _quickActionButtonType = getQuickActionButtonType(participant, _isAudioMuted, state);
+
+    return {
+        _audioMediaState,
+        _displayName: getParticipantDisplayName(state, participant?.id),
+        _isAudioMuted,
+        _isVideoMuted,
+        _local: Boolean(participant?.local),
+        _participantID: participant?.id,
+        _quickActionButtonType,
+        _raisedHand: Boolean(participant?.raisedHand)
+    };
+}
+
+export default connect(_mapStateToProps)(MeetingParticipantItem);
diff --git a/react/features/participants-pane/components/web/MeetingParticipantList.js b/react/features/participants-pane/components/web/MeetingParticipantList.js
new file mode 100644
index 000000000..e434488ac
--- /dev/null
+++ b/react/features/participants-pane/components/web/MeetingParticipantList.js
@@ -0,0 +1,155 @@
+// @flow
+
+import React, { useCallback, useRef, useState } from 'react';
+import { useTranslation } from 'react-i18next';
+import { useSelector, useDispatch } from 'react-redux';
+
+import { openDialog } from '../../../base/dialog';
+import {
+    getLocalParticipant,
+    getParticipantCountWithFake,
+    getRemoteParticipants
+} from '../../../base/participants';
+import MuteRemoteParticipantDialog from '../../../video-menu/components/web/MuteRemoteParticipantDialog';
+import { findStyledAncestor, shouldRenderInviteButton } from '../../functions';
+
+import { InviteButton } from './InviteButton';
+import MeetingParticipantContextMenu from './MeetingParticipantContextMenu';
+import MeetingParticipantItem from './MeetingParticipantItem';
+import { Heading, ParticipantContainer } from './styled';
+
+type NullProto = {
+  [key: string]: any,
+  __proto__: null
+};
+
+type RaiseContext = NullProto | {|
+
+  /**
+   * Target elements against which positioning calculations are made
+   */
+  offsetTarget?: HTMLElement,
+
+  /**
+   * The ID of the participant.
+   */
+  participantID?: String,
+|};
+
+const initialState = Object.freeze(Object.create(null));
+
+/**
+ * Renders the MeetingParticipantList component.
+ *
+ * @returns {ReactNode} - The component.
+ */
+export function MeetingParticipantList() {
+    const dispatch = useDispatch();
+    const isMouseOverMenu = useRef(false);
+    const participants = useSelector(getRemoteParticipants);
+    const localParticipant = useSelector(getLocalParticipant);
+
+    // This is very important as getRemoteParticipants is not changing its reference object
+    // and we will not re-render on change, but if count changes we will do
+    const participantsCount = useSelector(getParticipantCountWithFake);
+
+    const showInviteButton = useSelector(shouldRenderInviteButton);
+    const [ raiseContext, setRaiseContext ] = useState<RaiseContext>(initialState);
+    const { t } = useTranslation();
+
+    const lowerMenu = useCallback(() => {
+        /**
+         * We are tracking mouse movement over the active participant item and
+         * the context menu. Due to the order of enter/leave events, we need to
+         * defer checking if the mouse is over the context menu with
+         * queueMicrotask
+         */
+        window.queueMicrotask(() => {
+            if (isMouseOverMenu.current) {
+                return;
+            }
+
+            if (raiseContext !== initialState) {
+                setRaiseContext(initialState);
+            }
+        });
+    }, [ raiseContext ]);
+
+    const raiseMenu = useCallback((participantID, target) => {
+        setRaiseContext({
+            participantID,
+            offsetTarget: findStyledAncestor(target, ParticipantContainer)
+        });
+    }, [ raiseContext ]);
+
+    const toggleMenu = useCallback(participantID => e => {
+        const { participantID: raisedParticipant } = raiseContext;
+
+        if (raisedParticipant && raisedParticipant === participantID) {
+            lowerMenu();
+        } else {
+            raiseMenu(participantID, e.target);
+        }
+    }, [ raiseContext ]);
+
+    const menuEnter = useCallback(() => {
+        isMouseOverMenu.current = true;
+    }, []);
+
+    const menuLeave = useCallback(() => {
+        isMouseOverMenu.current = false;
+        lowerMenu();
+    }, [ lowerMenu ]);
+
+    const muteAudio = useCallback(id => () => {
+        dispatch(openDialog(MuteRemoteParticipantDialog, { participantID: id }));
+    });
+
+    // FIXME:
+    // It seems that useTranslation is not very scallable. Unmount 500 components that have the useTranslation hook is
+    // taking more than 10s. To workaround the issue we need to pass the texts as props. This is temporary and dirty
+    // solution!!!
+    // One potential proper fix would be to use react-window component in order to lower the number of components
+    // mounted.
+    const participantActionEllipsisLabel = t('MeetingParticipantItem.ParticipantActionEllipsis.options');
+    const youText = t('chat.you');
+    const askUnmuteText = t('participantsPane.actions.askUnmute');
+    const muteParticipantButtonText = t('dialog.muteParticipantButton');
+
+    const renderParticipant = id => (
+        <MeetingParticipantItem
+            askUnmuteText = { askUnmuteText }
+            isHighlighted = { raiseContext.participantID === id }
+            key = { id }
+            muteAudio = { muteAudio }
+            muteParticipantButtonText = { muteParticipantButtonText }
+            onContextMenu = { toggleMenu(id) }
+            onLeave = { lowerMenu }
+            participantActionEllipsisLabel = { participantActionEllipsisLabel }
+            participantID = { id }
+            youText = { youText } />
+    );
+
+    const items = [];
+
+    localParticipant && items.push(renderParticipant(localParticipant?.id));
+    participants.forEach(p => {
+        items.push(renderParticipant(p?.id));
+    });
+
+    return (
+    <>
+        <Heading>{t('participantsPane.headings.participantsList', { count: participantsCount })}</Heading>
+        {showInviteButton && <InviteButton />}
+        <div>
+            { items }
+        </div>
+        <MeetingParticipantContextMenu
+            muteAudio = { muteAudio }
+            onEnter = { menuEnter }
+            onLeave = { menuLeave }
+            onSelect = { lowerMenu }
+            { ...raiseContext } />
+    </>
+    );
+}
diff --git a/react/features/participants-pane/components/web/ParticipantItem.js b/react/features/participants-pane/components/web/ParticipantItem.js
new file mode 100644
index 000000000..fbccb5ca7
--- /dev/null
+++ b/react/features/participants-pane/components/web/ParticipantItem.js
@@ -0,0 +1,187 @@
+// @flow
+
+import React, { type Node } from 'react';
+
+import { Avatar } from '../../../base/avatar';
+import {
+    Icon,
+    IconCameraEmpty,
+    IconCameraEmptyDisabled,
+    IconMicrophoneEmpty,
+    IconMicrophoneEmptySlash
+} from '../../../base/icons';
+import { ACTION_TRIGGER, MEDIA_STATE, type ActionTrigger, type MediaState } from '../../constants';
+
+import { RaisedHandIndicator } from './RaisedHandIndicator';
+import {
+    ColoredIcon,
+    ParticipantActionsHover,
+    ParticipantActionsPermanent,
+    ParticipantContainer,
+    ParticipantContent,
+    ParticipantName,
+    ParticipantNameContainer,
+    ParticipantStates
+} from './styled';
+
+/**
+ * Participant actions component mapping depending on trigger type.
+ */
+const Actions = {
+    [ACTION_TRIGGER.HOVER]: ParticipantActionsHover,
+    [ACTION_TRIGGER.PERMANENT]: ParticipantActionsPermanent
+};
+
+/**
+ * Icon mapping for possible participant audio states.
+ */
+const AudioStateIcons: {[MediaState]: React$Element<any> | null} = {
+    [MEDIA_STATE.FORCE_MUTED]: (
+        <ColoredIcon color = '#E04757'>
+            <Icon
+                size = { 16 }
+                src = { IconMicrophoneEmptySlash } />
+        </ColoredIcon>
+    ),
+    [MEDIA_STATE.MUTED]: (
+        <Icon
+            size = { 16 }
+            src = { IconMicrophoneEmptySlash } />
+    ),
+    [MEDIA_STATE.UNMUTED]: (
+        <ColoredIcon color = '#1EC26A'>
+            <Icon
+                size = { 16 }
+                src = { IconMicrophoneEmpty } />
+        </ColoredIcon>
+    ),
+    [MEDIA_STATE.NONE]: null
+};
+
+/**
+ * Icon mapping for possible participant video states.
+ */
+const VideoStateIcons = {
+    [MEDIA_STATE.FORCE_MUTED]: (
+        <Icon
+            size = { 16 }
+            src = { IconCameraEmptyDisabled } />
+    ),
+    [MEDIA_STATE.MUTED]: (
+        <Icon
+            size = { 16 }
+            src = { IconCameraEmptyDisabled } />
+    ),
+    [MEDIA_STATE.UNMUTED]: (
+        <Icon
+            size = { 16 }
+            src = { IconCameraEmpty } />
+    ),
+    [MEDIA_STATE.NONE]: null
+};
+
+type Props = {
+
+    /**
+     * Type of trigger for the participant actions
+     */
+    actionsTrigger: ActionTrigger,
+
+    /**
+     * Media state for audio
+     */
+    audioMediaState: MediaState,
+
+    /**
+     * React children
+     */
+    children: Node,
+
+    /**
+     * The name of the participant. Used for showing lobby names.
+     */
+    displayName: string,
+
+    /**
+     * Is this item highlighted/raised
+     */
+    isHighlighted?: boolean,
+
+    /**
+     * True if the participant is local.
+     */
+    local: boolean,
+
+    /**
+     * Callback for when the mouse leaves this component
+     */
+    onLeave?: Function,
+
+    /**
+     * The ID of the participant.
+     */
+    participantID: string,
+
+    /**
+     * True if the participant have raised hand.
+     */
+    raisedHand: boolean,
+
+    /**
+     * Media state for video
+     */
+    videoMuteState: MediaState,
+
+    /**
+     * The translated "you" text.
+     */
+    youText: string
+}
+
+/**
+ * A component representing a participant entry in ParticipantPane and Lobby.
+ *
+ * @param {Props} props - The props of the component.
+ * @returns {ReactNode}
+ */
+export default function ParticipantItem({
+    children,
+    isHighlighted,
+    onLeave,
+    actionsTrigger = ACTION_TRIGGER.HOVER,
+    audioMediaState = MEDIA_STATE.NONE,
+    videoMuteState = MEDIA_STATE.NONE,
+    displayName,
+    participantID,
+    local,
+    raisedHand,
+    youText
+}: Props) {
+    const ParticipantActions = Actions[actionsTrigger];
+
+    return (
+        <ParticipantContainer
+            isHighlighted = { isHighlighted }
+            onMouseLeave = { onLeave }
+            trigger = { actionsTrigger }>
+            <Avatar
+                className = 'participant-avatar'
+                participantId = { participantID }
+                size = { 32 } />
+            <ParticipantContent>
+                <ParticipantNameContainer>
+                    <ParticipantName>
+                        { displayName }
+                    </ParticipantName>
+                    { local ? <span>&nbsp;({ youText })</span> : null }
+                </ParticipantNameContainer>
+                { !local && <ParticipantActions children = { children } /> }
+                <ParticipantStates>
+                    { raisedHand && <RaisedHandIndicator /> }
+                    { VideoStateIcons[videoMuteState] }
+                    { AudioStateIcons[audioMediaState] }
+                </ParticipantStates>
+            </ParticipantContent>
+        </ParticipantContainer>
+    );
+}
diff --git a/react/features/participants-pane/components/web/ParticipantsPane.js b/react/features/participants-pane/components/web/ParticipantsPane.js
new file mode 100644
index 000000000..52a8b4cd9
--- /dev/null
+++ b/react/features/participants-pane/components/web/ParticipantsPane.js
@@ -0,0 +1,266 @@
+// @flow
+
+import React, { Component } from 'react';
+import { ThemeProvider } from 'styled-components';
+
+import { openDialog } from '../../../base/dialog';
+import { translate } from '../../../base/i18n';
+import {
+    getParticipantCount,
+    isLocalParticipantModerator
+} from '../../../base/participants';
+import { connect } from '../../../base/redux';
+import { MuteEveryoneDialog } from '../../../video-menu/components/';
+import { close } from '../../actions';
+import { classList, findStyledAncestor, getParticipantsPaneOpen } from '../../functions';
+import theme from '../../theme.json';
+import { FooterContextMenu } from '../FooterContextMenu';
+
+import { LobbyParticipantList } from './LobbyParticipantList';
+import { MeetingParticipantList } from './MeetingParticipantList';
+import {
+    AntiCollapse,
+    Close,
+    Container,
+    Footer,
+    FooterButton,
+    FooterEllipsisButton,
+    FooterEllipsisContainer,
+    Header
+} from './styled';
+
+/**
+ * The type of the React {@code Component} props of {@link ParticipantsPane}.
+ */
+type Props = {
+
+    /**
+     * Is the participants pane open.
+     */
+    _paneOpen: boolean,
+
+    /**
+     * Whether to show context menu.
+     */
+    _showContextMenu: boolean,
+
+    /**
+     * Whether to show the footer menu.
+     */
+    _showFooter: boolean,
+
+    /**
+     * The Redux dispatch function.
+     */
+    dispatch: Function,
+
+    /**
+     * The i18n translate function.
+     */
+    t: Function
+};
+
+/**
+ * The type of the React {@code Component} state of {@link ParticipantsPane}.
+ */
+type State = {
+
+    /**
+     * Indicates if the footer context menu is open.
+     */
+    contextOpen: boolean,
+};
+
+/**
+ * Implements the participants list.
+ */
+class ParticipantsPane extends Component<Props, State> {
+    /**
+     * Initializes a new {@code ParticipantsPane} instance.
+     *
+     * @inheritdoc
+     */
+    constructor(props) {
+        super(props);
+
+        this.state = {
+            contextOpen: false
+        };
+
+        // Bind event handlers so they are only bound once per instance.
+        this._onClosePane = this._onClosePane.bind(this);
+        this._onKeyPress = this._onKeyPress.bind(this);
+        this._onMuteAll = this._onMuteAll.bind(this);
+        this._onToggleContext = this._onToggleContext.bind(this);
+        this._onWindowClickListener = this._onWindowClickListener.bind(this);
+    }
+
+
+    /**
+     * Implements React's {@link Component#componentDidMount()}.
+     *
+     * @inheritdoc
+     */
+    componentDidMount() {
+        window.addEventListener('click', this._onWindowClickListener);
+    }
+
+    /**
+     * Implements React's {@link Component#componentWillUnmount()}.
+     *
+     * @inheritdoc
+     */
+    componentWillUnmount() {
+        window.removeEventListener('click', this._onWindowClickListener);
+    }
+
+    /**
+     * Implements React's {@link Component#render}.
+     *
+     * @inheritdoc
+     */
+    render() {
+        const {
+            _paneOpen,
+            _showContextMenu,
+            _showFooter,
+            t
+        } = this.props;
+
+        // when the pane is not open optimize to not
+        // execute the MeetingParticipantList render for large list of participants
+        if (!_paneOpen) {
+            return null;
+        }
+
+        return (
+            <ThemeProvider theme = { theme }>
+                <div className = { classList('participants_pane', !_paneOpen && 'participants_pane--closed') }>
+                    <div className = 'participants_pane-content'>
+                        <Header>
+                            <Close
+                                aria-label = { t('participantsPane.close', 'Close') }
+                                onClick = { this._onClosePane }
+                                onKeyPress = { this._onKeyPress }
+                                role = 'button'
+                                tabIndex = { 0 } />
+                        </Header>
+                        <Container>
+                            <LobbyParticipantList />
+                            <AntiCollapse />
+                            <MeetingParticipantList />
+                        </Container>
+                        {_showFooter && (
+                            <Footer>
+                                <FooterButton onClick = { this._onMuteAll }>
+                                    {t('participantsPane.actions.muteAll')}
+                                </FooterButton>
+                                {_showContextMenu && (
+                                    <FooterEllipsisContainer>
+                                        <FooterEllipsisButton
+                                            id = 'participants-pane-context-menu'
+                                            onClick = { this._onToggleContext } />
+                                        {this.state.contextOpen
+                                            && <FooterContextMenu onMouseLeave = { this._onToggleContext } />}
+                                    </FooterEllipsisContainer>
+                                )}
+                            </Footer>
+                        )}
+                    </div>
+                </div>
+            </ThemeProvider>
+        );
+    }
+
+    _onClosePane: () => void;
+
+    /**
+     * Callback for closing the participant pane.
+     *
+     * @private
+     * @returns {void}
+     */
+    _onClosePane() {
+        this.props.dispatch(close());
+    }
+
+    _onKeyPress: (Object) => void;
+
+    /**
+     * KeyPress handler for accessibility for closing the participants pane.
+     *
+     * @param {Object} e - The key event to handle.
+     *
+     * @returns {void}
+     */
+    _onKeyPress(e) {
+        if (e.key === ' ' || e.key === 'Enter') {
+            e.preventDefault();
+            this._onClosePane();
+        }
+    }
+
+    _onMuteAll: () => void;
+
+    /**
+     * The handler for clicking mute all button.
+     *
+     * @returns {void}
+     */
+    _onMuteAll() {
+        this.props.dispatch(openDialog(MuteEveryoneDialog));
+    }
+
+    _onToggleContext: () => void;
+
+    /**
+     * Handler for toggling open/close of the footer context menu.
+     *
+     * @returns {void}
+     */
+    _onToggleContext() {
+        this.setState({
+            contextOpen: !this.state.contextOpen
+        });
+    }
+
+    _onWindowClickListener: (event: Object) => void;
+
+    /**
+     * Window click event listener.
+     *
+     * @param {Event} e - The click event.
+     * @returns {void}
+     */
+    _onWindowClickListener(e) {
+        if (this.state.contextOpen && !findStyledAncestor(e.target, FooterEllipsisContainer)) {
+            this.setState({
+                contextOpen: false
+            });
+        }
+    }
+}
+
+/**
+ * Maps (parts of) the redux state to the React {@code Component} props of
+ * {@code ParticipantsPane}.
+ *
+ * @param {Object} state - The redux state.
+ * @protected
+ * @returns {{
+ *     _paneOpen: boolean,
+ *     _showContextMenu: boolean,
+ *     _showFooter: boolean
+ * }}
+ */
+function _mapStateToProps(state: Object) {
+    const isPaneOpen = getParticipantsPaneOpen(state);
+
+    return {
+        _paneOpen: isPaneOpen,
+        _showContextMenu: isPaneOpen && getParticipantCount(state) > 2,
+        _showFooter: isPaneOpen && isLocalParticipantModerator(state)
+    };
+}
+
+export default translate(connect(_mapStateToProps)(ParticipantsPane));
diff --git a/react/features/participants-pane/components/web/RaisedHandIndicator.js b/react/features/participants-pane/components/web/RaisedHandIndicator.js
new file mode 100644
index 000000000..8034a13e8
--- /dev/null
+++ b/react/features/participants-pane/components/web/RaisedHandIndicator.js
@@ -0,0 +1,15 @@
+// @flow
+
+import React from 'react';
+
+import { Icon, IconRaisedHandHollow } from '../../../base/icons';
+
+import { RaisedHandIndicatorBackground } from './styled';
+
+export const RaisedHandIndicator = () => (
+    <RaisedHandIndicatorBackground>
+        <Icon
+            size = { 15 }
+            src = { IconRaisedHandHollow } />
+    </RaisedHandIndicatorBackground>
+);
diff --git a/react/features/participants-pane/components/web/index.js b/react/features/participants-pane/components/web/index.js
new file mode 100644
index 000000000..eff0bc764
--- /dev/null
+++ b/react/features/participants-pane/components/web/index.js
@@ -0,0 +1,7 @@
+export * from './InviteButton';
+export * from './LobbyParticipantItem';
+export * from './LobbyParticipantList';
+export * from './MeetingParticipantList';
+export { default as ParticipantsPane } from './ParticipantsPane';
+export * from '../ParticipantsPaneButton';
+export * from './RaisedHandIndicator';
diff --git a/react/features/participants-pane/components/web/styled.js b/react/features/participants-pane/components/web/styled.js
new file mode 100644
index 000000000..c6c076a6e
--- /dev/null
+++ b/react/features/participants-pane/components/web/styled.js
@@ -0,0 +1,346 @@
+import React from 'react';
+import styled from 'styled-components';
+
+import { Icon, IconHorizontalPoints } from '../../../base/icons';
+import { ACTION_TRIGGER } from '../../constants';
+
+export const ignoredChildClassName = 'ignore-child';
+
+export const AntiCollapse = styled.br`
+  font-size: 0;
+`;
+
+export const Button = styled.button`
+  align-items: center;
+  background-color: ${
+    // eslint-disable-next-line no-confusing-arrow
+    props => props.primary ? '#0056E0' : '#3D3D3D'
+};
+  border: 0;
+  border-radius: 6px;
+  display: flex;
+  font-weight: unset;
+  justify-content: center;
+  min-height: 32px;
+
+  &:hover {
+    background-color: ${
+    // eslint-disable-next-line no-confusing-arrow
+    props => props.primary ? '#246FE5' : '#525252'
+};
+  }
+`;
+
+export const QuickActionButton = styled(Button)`
+  padding: 0 12px;
+`;
+
+export const Container = styled.div`
+  box-sizing: border-box;
+  flex: 1;
+  overflow-y: auto;
+  position: relative;
+  padding: 0 ${props => props.theme.panePadding}px;
+
+  & > * + *:not(.${ignoredChildClassName}) {
+    margin-top: 16px;
+  }
+
+  &::-webkit-scrollbar {
+    display: none;
+  }
+`;
+
+export const ContextMenu = styled.div.attrs(props => {
+    return {
+        className: props.className
+    };
+})`
+  background-color: #292929;
+  border-radius: 3px;
+  box-shadow: 0px 3px 16px rgba(0, 0, 0, 0.6), 0px 0px 4px 1px rgba(0, 0, 0, 0.25);
+  color: white;
+  font-size: ${props => props.theme.contextFontSize}px;
+  font-weight: ${props => props.theme.contextFontWeight};
+  margin-top: ${props => {
+        const {
+            participantActionButtonHeight,
+            participantItemHeight
+        } = props.theme;
+
+        return ((3 * participantItemHeight) + participantActionButtonHeight) / 4;
+    }}px;
+  position: absolute;
+  right: ${props => props.theme.panePadding}px;
+  top: 0;
+  z-index: 2;
+
+  & > li {
+    list-style: none;
+  }
+
+  ${props => props.isHidden && `
+    pointer-events: none;
+    visibility: hidden;
+  `}
+`;
+
+export const ContextMenuIcon = styled(Icon).attrs({
+    size: 20
+})`
+  & > svg {
+    fill: #a4b8d1;
+  }
+`;
+
+export const ContextMenuItem = styled.div`
+  align-items: center;
+  box-sizing: border-box;
+  cursor: pointer;
+  display: flex;
+  min-height: 40px;
+  padding: 8px 16px;
+
+  & > *:not(:last-child) {
+    margin-right: 16px;
+  }
+
+  &:hover {
+    background-color: #525252;
+  }
+`;
+
+export const ContextMenuItemGroup = styled.div`
+  &:not(:empty) {
+    padding: 8px 0;
+  }
+
+  & + &:not(:empty) {
+    border-top: 1px solid #4C4D50;
+  }
+`;
+
+export const Close = styled.div`
+  align-items: center;
+  cursor: pointer;
+  display: flex;
+  height: 20px;
+  justify-content: center;
+  width: 20px;
+
+  &:before, &:after {
+    content: '';
+    background-color: #a4b8d1;
+    border-radius: 2px;
+    height: 2px;
+    position: absolute;
+    transform-origin: center center;
+    width: 21px;
+  }
+
+  &:before {
+    transform: rotate(45deg);
+  }
+
+  &:after {
+    transform: rotate(-45deg);
+  }
+`;
+
+export const Footer = styled.div`
+  background-color: #141414;
+  display: flex;
+  justify-content: flex-end;
+  padding: 24px ${props => props.theme.panePadding}px;
+
+  & > *:not(:last-child) {
+    margin-right: 16px;
+  }
+`;
+
+export const FooterButton = styled(Button)`
+  height: 40px;
+  font-size: 15px;
+  padding: 0 16px;
+`;
+
+export const FooterEllipsisButton = styled(FooterButton).attrs({
+    children: <Icon src = { IconHorizontalPoints } />
+})`
+  padding: 8px;
+`;
+
+export const FooterEllipsisContainer = styled.div`
+  position: relative;
+`;
+
+export const Header = styled.div`
+  align-items: center;
+  box-sizing: border-box;
+  display: flex;
+  height: ${props => props.theme.headerSize}px;
+  padding: 0 20px;
+`;
+
+export const Heading = styled.div`
+  color: #d1dbe8;
+  font-style: normal;
+  font-size: 15px;
+  line-height: 24px;
+  margin: 8px 0 ${props => props.theme.panePadding}px;
+`;
+
+export const ColoredIcon = styled.div`
+  & > div > svg {
+    fill: ${props => props.color || '#fff'};
+  }
+`;
+
+export const ParticipantActionButton = styled(Button)`
+  height: ${props => props.theme.participantActionButtonHeight}px;
+  padding: 6px 10px;
+`;
+
+export const ParticipantActionEllipsis = styled(ParticipantActionButton).attrs({
+    children: <Icon src = { IconHorizontalPoints } />,
+    primary: true
+})`
+  padding: 6px;
+`;
+
+export const ParticipantActions = styled.div`
+  align-items: center;
+  z-index: 1;
+
+  & > *:not(:last-child) {
+    margin-right: 8px;
+  }
+`;
+
+export const ParticipantActionsHover = styled(ParticipantActions)`
+  background-color: #292929;
+  bottom: 1px;
+  display: none;
+  position: absolute;
+  right: ${props => props.theme.panePadding};
+  top: 0;
+
+  &:after {
+    content: '';
+    background: linear-gradient(90deg, rgba(0, 0, 0, 0) 0%, #292929 100%);
+    bottom: 0;
+    display: block;
+    left: 0;
+    pointer-events: none;
+    position: absolute;
+    top: 0;
+    transform: translateX(-100%);
+    width: 40px;
+  }
+`;
+
+export const ParticipantActionsPermanent = styled(ParticipantActions)`
+  display: flex;
+`;
+
+export const ParticipantContent = styled.div`
+  align-items: center;
+  box-shadow: inset 0px -1px 0px rgba(255, 255, 255, 0.15);
+  display: flex;
+  flex: 1;
+  height: 100%;
+  overflow: hidden;
+  padding-right: ${props => props.theme.panePadding}px;
+`;
+
+export const ParticipantContainer = styled.div`
+  align-items: center;
+  color: white;
+  display: flex;
+  font-size: 13px;
+  height: ${props => props.theme.participantItemHeight}px;
+  margin: 0 -${props => props.theme.panePadding}px;
+  padding-left: ${props => props.theme.panePadding}px;
+  position: relative;
+
+  ${props => !props.isHighlighted && '&:hover {'}
+    background-color: #292929;
+
+    & ${ParticipantActions} {
+      ${props => props.trigger === ACTION_TRIGGER.HOVER && `
+        display: flex;
+      `}
+    }
+
+    & ${ParticipantContent} {
+      box-shadow: none;
+    }
+  ${props => !props.isHighlighted && '}'}
+`;
+
+export const ParticipantInviteButton = styled(Button).attrs({
+    primary: true
+})`
+  font-size: 15px;
+  height: 40px;
+  width: 100%;
+
+  & > *:not(:last-child) {
+    margin-right: 8px;
+  }
+`;
+
+export const ParticipantName = styled.div`
+  overflow: hidden;
+  text-overflow: ellipsis;
+  white-space: nowrap;
+`;
+
+export const ParticipantNameContainer = styled.div`
+  display: flex;
+  flex: 1;
+  margin-right: 8px;
+  overflow: hidden;
+`;
+
+export const ParticipantStates = styled.div`
+  display: flex;
+  justify-content: flex-end;
+
+  & > * {
+    align-items: center;
+    display: flex;
+    justify-content: center;
+  }
+
+  & > *:not(:last-child) {
+    margin-right: 8px;
+  }
+`;
+
+export const RaisedHandIndicatorBackground = styled.div`
+  background-color: #ed9e1b;
+  border-radius: 3px;
+  height: 24px;
+  width: 24px;
+`;
+
+export const VolumeInput = styled.input.attrs({
+    type: 'range'
+})`
+  width: 100%;
+`;
+
+export const VolumeInputContainer = styled.div`
+  position: relative;
+  width: 100%;
+`;
+
+export const VolumeOverlay = styled.div`
+  background-color: #0376da;
+  border-radius: 1px 0 0 1px;
+  height: 100%;
+  left: 0;
+  pointer-events: none;
+  position: absolute;
+`;
diff --git a/react/features/reactions/actionTypes.js b/react/features/reactions/actionTypes.js
new file mode 100644
index 000000000..fb17b232e
--- /dev/null
+++ b/react/features/reactions/actionTypes.js
@@ -0,0 +1,60 @@
+/**
+ * The type of the (redux) action which shows/hides the reactions menu.
+ *
+ * {
+ *     type: TOGGLE_REACTIONS_VISIBLE,
+ *     visible: boolean
+ * }
+ */
+export const TOGGLE_REACTIONS_VISIBLE = 'TOGGLE_REACTIONS_VISIBLE';
+
+/**
+ * The type of the action which adds a new reaction to the reactions message and sets
+ * a new timeout.
+ *
+ * {
+ *     type: ADD_REACTION_BUFFER,
+ *     message: string,
+ *     timeoutID: number
+ * }
+ */
+export const ADD_REACTION_BUFFER = 'ADD_REACTION_BUFFER';
+
+/**
+ * The type of the action which sends the reaction buffer and resets it.
+ *
+ * {
+ *     type: FLUSH_REACTION_BUFFER
+ * }
+ */
+export const FLUSH_REACTION_BUFFER = 'FLUSH_REACTION_BUFFER';
+
+/**
+ * The type of the action which adds a new reaction message to the chat.
+ *
+ * {
+ *     type: ADD_REACTION_MESSAGE,
+ *     message: string,
+ * }
+ */
+export const ADD_REACTION_MESSAGE = 'ADD_REACTION_MESSAGE';
+
+/**
+ * The type of the action which sets the reactions queue.
+ *
+ * {
+ *     type: SET_REACTION_QUEUE,
+ *     value: Array
+ * }
+ */
+export const SET_REACTION_QUEUE = 'SET_REACTION_QUEUE';
+
+/**
+ * The type of the action which signals a send reaction to everyone in the conference.
+ */
+export const SEND_REACTIONS = 'SEND_REACTIONS';
+
+/**
+ * The type of action to adds reactions to the queue.
+ */
+export const PUSH_REACTIONS = 'PUSH_REACTIONS';
diff --git a/react/features/reactions/actions.any.js b/react/features/reactions/actions.any.js
new file mode 100644
index 000000000..14bfa4dae
--- /dev/null
+++ b/react/features/reactions/actions.any.js
@@ -0,0 +1,114 @@
+// @flow
+
+import {
+    ADD_REACTION_BUFFER,
+    ADD_REACTION_MESSAGE,
+    FLUSH_REACTION_BUFFER,
+    PUSH_REACTIONS,
+    SEND_REACTIONS,
+    SET_REACTION_QUEUE
+} from './actionTypes';
+import { type ReactionEmojiProps } from './constants';
+
+/**
+ * Sets the reaction queue.
+ *
+ * @param {Array} value - The new queue.
+ * @returns {Function}
+ */
+export function setReactionQueue(value: Array<ReactionEmojiProps>) {
+    return {
+        type: SET_REACTION_QUEUE,
+        value
+    };
+}
+
+
+/**
+ * Removes a reaction from the queue.
+ *
+ * @param {number} uid - Id of the reaction to be removed.
+ * @returns {void}
+ */
+export function removeReaction(uid: number) {
+    return (dispatch: Function, getState: Function) => {
+        const queue = getState()['features/reactions'].queue;
+
+        dispatch(setReactionQueue(queue.filter(reaction => reaction.uid !== uid)));
+    };
+}
+
+
+/**
+ * Sends the reactions buffer to everyone in the conference.
+ *
+ * @returns {{
+ *     type: SEND_REACTION
+ * }}
+ */
+export function sendReactions() {
+    return {
+        type: SEND_REACTIONS
+    };
+}
+
+/**
+ * Adds a reaction to the local buffer.
+ *
+ * @param {string} reaction - The reaction to be added.
+ * @returns {{
+ *     type: ADD_REACTION_BUFFER,
+ *     reaction: string
+ * }}
+ */
+export function addReactionToBuffer(reaction: string) {
+    return {
+        type: ADD_REACTION_BUFFER,
+        reaction
+    };
+}
+
+/**
+ * Clears the reaction buffer.
+ *
+ * @returns {{
+ *     type: FLUSH_REACTION_BUFFER
+ * }}
+ */
+export function flushReactionBuffer() {
+    return {
+        type: FLUSH_REACTION_BUFFER
+    };
+}
+
+/**
+ * Adds a reaction message to the chat.
+ *
+ * @param {string} message - The reaction message.
+ * @returns {{
+ *     type: ADD_REACTION_MESSAGE,
+ *     message: string
+ * }}
+ */
+export function addReactionsToChat(message: string) {
+    return {
+        type: ADD_REACTION_MESSAGE,
+        message
+    };
+}
+
+/**
+ * Adds reactions to the animation queue.
+ *
+ * @param {Array} reactions - The reactions to be animated.
+ * @returns {{
+ *     type: PUSH_REACTIONS,
+ *     reactions: Array
+ * }}
+ */
+export function pushReactions(reactions: Array<string>) {
+    return {
+        type: PUSH_REACTIONS,
+        reactions
+    };
+}
diff --git a/react/features/reactions/actions.web.js b/react/features/reactions/actions.web.js
new file mode 100644
index 000000000..ffbf5178f
--- /dev/null
+++ b/react/features/reactions/actions.web.js
@@ -0,0 +1,16 @@
+// @flow
+
+import {
+    TOGGLE_REACTIONS_VISIBLE
+} from './actionTypes';
+
+/**
+ * Toggles the visibility of the reactions menu.
+ *
+ * @returns {Function}
+ */
+export function toggleReactionsMenuVisibility() {
+    return {
+        type: TOGGLE_REACTIONS_VISIBLE
+    };
+}
diff --git a/react/features/reactions/components/_.native.js b/react/features/reactions/components/_.native.js
new file mode 100644
index 000000000..738c4d2b8
--- /dev/null
+++ b/react/features/reactions/components/_.native.js
@@ -0,0 +1 @@
+export * from './native';
diff --git a/react/features/reactions/components/_.web.js b/react/features/reactions/components/_.web.js
new file mode 100644
index 000000000..b80c83af3
--- /dev/null
+++ b/react/features/reactions/components/_.web.js
@@ -0,0 +1 @@
+export * from './web';
diff --git a/react/features/reactions/components/index.js b/react/features/reactions/components/index.js
new file mode 100644
index 000000000..cda61441e
--- /dev/null
+++ b/react/features/reactions/components/index.js
@@ -0,0 +1 @@
+export * from './_';
diff --git a/react/features/reactions/components/native/RaiseHandButton.js b/react/features/reactions/components/native/RaiseHandButton.js
new file mode 100644
index 000000000..248d3bfc5
--- /dev/null
+++ b/react/features/reactions/components/native/RaiseHandButton.js
@@ -0,0 +1,165 @@
+// @flow
+
+import React, { Component } from 'react';
+import { Text, TouchableHighlight, View } from 'react-native';
+import { type Dispatch } from 'redux';
+
+import {
+    createToolbarEvent,
+    sendAnalytics
+} from '../../../analytics';
+import { ColorSchemeRegistry } from '../../../base/color-scheme';
+import { translate } from '../../../base/i18n';
+import {
+    getLocalParticipant,
+    raiseHand
+} from '../../../base/participants';
+import { connect } from '../../../base/redux';
+import { type AbstractButtonProps } from '../../../base/toolbox/components';
+
+import { type ReactionStyles } from './ReactionButton';
+
+/**
+ * The type of the React {@code Component} props of {@link RaiseHandButton}.
+ */
+type Props = AbstractButtonProps & {
+
+    /**
+     * The local participant.
+     */
+    _localParticipant: Object,
+
+    /**
+     * Whether the participant raused their hand or not.
+     */
+    _raisedHand: boolean,
+
+    /**
+     * The redux {@code dispatch} function.
+     */
+    dispatch: Dispatch<any>,
+
+    /**
+     * Used for translation
+     */
+    t: Function,
+
+    /**
+     * Used to close the overflow menu after raise hand is clicked.
+     */
+    onCancel: Function,
+
+    /**
+     * Styles for the button.
+     */
+    _styles: ReactionStyles
+};
+
+/**
+ * An implementation of a button to raise or lower hand.
+ */
+class RaiseHandButton extends Component<Props, *> {
+    accessibilityLabel = 'toolbar.accessibilityLabel.raiseHand';
+    label = 'toolbar.raiseYourHand';
+    toggledLabel = 'toolbar.lowerYourHand';
+
+    /**
+     * Initializes a new {@code RaiseHandButton} instance.
+     *
+     * @param {Props} props - The React {@code Component} props to initialize
+     * the new {@code RaiseHandButton} instance with.
+     */
+    constructor(props: Props) {
+        super(props);
+
+        // Bind event handlers so they are only bound once per instance.
+        this._onClick = this._onClick.bind(this);
+        this._toggleRaisedHand = this._toggleRaisedHand.bind(this);
+        this._getLabel = this._getLabel.bind(this);
+    }
+
+    _onClick: () => void;
+
+    _toggleRaisedHand: () => void;
+
+    _getLabel: () => string;
+
+    /**
+     * Handles clicking / pressing the button.
+     *
+     * @returns {void}
+     */
+    _onClick() {
+        this._toggleRaisedHand();
+        this.props.onCancel();
+    }
+
+    /**
+     * Toggles the rased hand status of the local participant.
+     *
+     * @returns {void}
+     */
+    _toggleRaisedHand() {
+        const enable = !this.props._raisedHand;
+
+        sendAnalytics(createToolbarEvent('raise.hand', { enable }));
+
+        this.props.dispatch(raiseHand(enable));
+    }
+
+    /**
+     * Gets the current label, taking the toggled state into account. If no
+     * toggled label is provided, the regular label will also be used in the
+     * toggled state.
+     *
+     * @returns {string}
+     */
+    _getLabel() {
+        const { _raisedHand, t } = this.props;
+
+        return t(_raisedHand ? this.toggledLabel : this.label);
+    }
+
+    /**
+     * Implements React's {@link Component#render()}.
+     *
+     * @inheritdoc
+     * @returns {ReactElement}
+     */
+    render() {
+        const { _styles, t } = this.props;
+
+        return (
+            <TouchableHighlight
+                accessibilityLabel = { t(this.accessibilityLabel) }
+                accessibilityRole = 'button'
+                onPress = { this._onClick }
+                style = { _styles.style }
+                underlayColor = { _styles.underlayColor }>
+                <View style = { _styles.container }>
+                    <Text style = { _styles.emoji }>✋</Text>
+                    <Text style = { _styles.text }>{this._getLabel()}</Text>
+                </View>
+            </TouchableHighlight>
+        );
+    }
+}
+
+/**
+ * Maps part of the Redux state to the props of this component.
+ *
+ * @param {Object} state - The Redux state.
+ * @private
+ * @returns {Props}
+ */
+function _mapStateToProps(state): Object {
+    const _localParticipant = getLocalParticipant(state);
+
+    return {
+        _localParticipant,
+        _raisedHand: _localParticipant.raisedHand,
+        _styles: ColorSchemeRegistry.get(state, 'Toolbox').raiseHandButton
+    };
+}
+
+export default translate(connect(_mapStateToProps)(RaiseHandButton));
diff --git a/react/features/reactions/components/native/ReactionButton.js b/react/features/reactions/components/native/ReactionButton.js
new file mode 100644
index 000000000..3125fe367
--- /dev/null
+++ b/react/features/reactions/components/native/ReactionButton.js
@@ -0,0 +1,98 @@
+// @flow
+
+import React from 'react';
+import { Text, TouchableHighlight } from 'react-native';
+import { useDispatch } from 'react-redux';
+
+import { createReactionMenuEvent, sendAnalytics } from '../../../analytics';
+import { translate } from '../../../base/i18n';
+import type { StyleType } from '../../../base/styles';
+import { addReactionToBuffer } from '../../actions.any';
+import { REACTIONS } from '../../constants';
+
+
+export type ReactionStyles = {
+
+    /**
+     * Style for the button.
+     */
+    style: StyleType,
+
+    /**
+     * Underlay color for the button.
+     */
+    underlayColor: StyleType,
+
+    /**
+     * Style for the emoji text on the button.
+     */
+    emoji: StyleType,
+
+    /**
+     * Style for the label text on the button.
+     */
+    text?: StyleType,
+
+    /**
+     * Style for text container. Used on raise hand button.
+     */
+    container?: StyleType
+
+}
+
+/**
+ * The type of the React {@code Component} props of {@link ReactionButton}.
+ */
+type Props = {
+
+    /**
+     * Collection of styles for the button.
+     */
+    styles: ReactionStyles,
+
+    /**
+     * The reaction to be sent
+     */
+    reaction: string,
+
+    /**
+     * Invoked to obtain translated strings.
+     */
+    t: Function
+};
+
+/**
+ * An implementation of a button to send a reaction.
+ *
+ * @returns {ReactElement}
+ */
+function ReactionButton({
+    styles,
+    reaction,
+    t
+}: Props) {
+    const dispatch = useDispatch();
+
+    /**
+     * Handles clicking / pressing the button.
+     *
+     * @returns {void}
+     */
+    function _onClick() {
+        dispatch(addReactionToBuffer(reaction));
+        sendAnalytics(createReactionMenuEvent(reaction));
+    }
+
+    return (
+        <TouchableHighlight
+            accessibilityLabel = { t(`toolbar.accessibilityLabel.${reaction}`) }
+            accessibilityRole = 'button'
+            onPress = { _onClick }
+            style = { styles.style }
+            underlayColor = { styles.underlayColor }>
+            <Text style = { styles.emoji }>{REACTIONS[reaction].emoji}</Text>
+        </TouchableHighlight>
+    );
+}
+
+export default translate(ReactionButton);
diff --git a/react/features/reactions/components/native/ReactionEmoji.js b/react/features/reactions/components/native/ReactionEmoji.js
new file mode 100644
index 000000000..85d3c464f
--- /dev/null
+++ b/react/features/reactions/components/native/ReactionEmoji.js
@@ -0,0 +1,96 @@
+// @flow
+
+import React, { useEffect, useMemo, useRef, useState } from 'react';
+import { Animated } from 'react-native';
+import { useDispatch, useSelector } from 'react-redux';
+
+import { ColorSchemeRegistry } from '../../../base/color-scheme';
+import { removeReaction } from '../../actions.any';
+import { REACTIONS, type ReactionEmojiProps } from '../../constants';
+
+
+type Props = ReactionEmojiProps & {
+
+    /**
+     * Index of reaction on the queue.
+     * Used to differentiate between first and other animations.
+     */
+    index: number
+};
+
+
+/**
+ * Animated reaction emoji.
+ *
+ * @returns {ReactElement}
+ */
+function ReactionEmoji({ reaction, uid, index }: Props) {
+    const _styles = useSelector(state => ColorSchemeRegistry.get(state, 'Toolbox'));
+    const _height = useSelector(state => state['features/base/responsive-ui'].clientHeight);
+    const dispatch = useDispatch();
+
+    const animationVal = useRef(new Animated.Value(0)).current;
+
+    const vh = useState(_height / 100)[0];
+
+    const randomInt = (min, max) => Math.floor((Math.random() * (max - min + 1)) + min);
+
+    const animationIndex = useMemo(() => index % 21, [ index ]);
+
+    const coordinates = useState({
+        topX: animationIndex === 0 ? 40 : randomInt(-100, 100),
+        topY: animationIndex === 0 ? -70 : randomInt(-65, -75),
+        bottomX: animationIndex === 0 ? 140 : randomInt(150, 200),
+        bottomY: animationIndex === 0 ? -50 : randomInt(-40, -50)
+    })[0];
+
+
+    useEffect(() => {
+        setTimeout(() => dispatch(removeReaction(uid)), 5000);
+    }, []);
+
+    useEffect(() => {
+        Animated.timing(
+            animationVal,
+            {
+                toValue: 1,
+                duration: 5000,
+                useNativeDriver: true
+            }
+        ).start();
+    }, [ animationVal ]);
+
+
+    return (
+        <Animated.Text
+            style = {{
+                ..._styles.emojiAnimation,
+                transform: [
+                    { translateY: animationVal.interpolate({
+                        inputRange: [ 0, 0.70, 0.75, 1 ],
+                        outputRange: [ 0, coordinates.topY * vh, coordinates.topY * vh, coordinates.bottomY * vh ]
+                    })
+                    }, {
+                        translateX: animationVal.interpolate({
+                            inputRange: [ 0, 0.70, 0.75, 1 ],
+                            outputRange: [ 0, coordinates.topX, coordinates.topX,
+                                coordinates.topX < 0 ? -coordinates.bottomX : coordinates.bottomX ]
+                        })
+                    }, {
+                        scale: animationVal.interpolate({
+                            inputRange: [ 0, 0.70, 0.75, 1 ],
+                            outputRange: [ 0.6, 1.5, 1.5, 1 ]
+                        })
+                    }
+                ],
+                opacity: animationVal.interpolate({
+                    inputRange: [ 0, 0.7, 0.75, 1 ],
+                    outputRange: [ 1, 1, 1, 0 ]
+                })
+            }}>
+            {REACTIONS[reaction].emoji}
+        </Animated.Text>
+    );
+}
+
+export default ReactionEmoji;
diff --git a/react/features/reactions/components/native/ReactionMenu.js b/react/features/reactions/components/native/ReactionMenu.js
new file mode 100644
index 000000000..91dc6bf61
--- /dev/null
+++ b/react/features/reactions/components/native/ReactionMenu.js
@@ -0,0 +1,59 @@
+// @flow
+
+import React from 'react';
+import { View } from 'react-native';
+import { useSelector } from 'react-redux';
+
+import { ColorSchemeRegistry } from '../../../base/color-scheme';
+import { getParticipantCount } from '../../../base/participants';
+import { REACTIONS } from '../../constants';
+
+import RaiseHandButton from './RaiseHandButton';
+import ReactionButton from './ReactionButton';
+
+/**
+ * The type of the React {@code Component} props of {@link ReactionMenu}.
+ */
+type Props = {
+
+    /**
+     * Used to close the overflow menu after raise hand is clicked.
+     */
+    onCancel: Function,
+
+    /**
+     * Whether or not it's displayed in the overflow menu.
+     */
+    overflowMenu: boolean
+};
+
+/**
+ * Animated reaction emoji.
+ *
+ * @returns {ReactElement}
+ */
+function ReactionMenu({
+    onCancel,
+    overflowMenu
+}: Props) {
+    const _styles = useSelector(state => ColorSchemeRegistry.get(state, 'Toolbox'));
+    const _participantCount = useSelector(state => getParticipantCount(state));
+
+    return (
+        <View style = { overflowMenu ? _styles.overflowReactionMenu : _styles.reactionMenu }>
+            {_participantCount > 1
+                && <View style = { _styles.reactionRow }>
+                    {Object.keys(REACTIONS).map(key => (
+                        <ReactionButton
+                            key = { key }
+                            reaction = { key }
+                            styles = { _styles.reactionButton } />
+                    ))}
+                </View>
+            }
+            <RaiseHandButton onCancel = { onCancel } />
+        </View>
+    );
+}
+
+export default ReactionMenu;
diff --git a/react/features/reactions/components/native/ReactionMenuDialog.js b/react/features/reactions/components/native/ReactionMenuDialog.js
new file mode 100644
index 000000000..c1faf4936
--- /dev/null
+++ b/react/features/reactions/components/native/ReactionMenuDialog.js
@@ -0,0 +1,143 @@
+// @flow
+
+import React, { PureComponent } from 'react';
+import { SafeAreaView, TouchableWithoutFeedback, View } from 'react-native';
+
+import { ColorSchemeRegistry } from '../../../base/color-scheme';
+import { hideDialog, isDialogOpen } from '../../../base/dialog';
+import { getParticipantCount } from '../../../base/participants';
+import { connect } from '../../../base/redux';
+import type { StyleType } from '../../../base/styles';
+
+import ReactionMenu from './ReactionMenu';
+
+/**
+ * The type of the React {@code Component} props of {@link ReactionMenuDialog}.
+ */
+type Props = {
+
+    /**
+     * The color-schemed stylesheet of the feature.
+     */
+    _styles: StyleType,
+
+    /**
+     * True if the dialog is currently visible, false otherwise.
+     */
+    _isOpen: boolean,
+
+    /**
+     * The width of the screen.
+     */
+    _width: number,
+
+    /**
+    * The height of the screen.
+    */
+    _height: number,
+
+    /**
+     * Number of conference participants.
+     */
+    _participantCount: number,
+
+    /**
+     * Used for hiding the dialog when the selection was completed.
+     */
+    dispatch: Function
+};
+
+/**
+ * The exported React {@code Component}. We need it to execute
+ * {@link hideDialog}.
+ *
+ * XXX It does not break our coding style rule to not utilize globals for state,
+ * because it is merely another name for {@code export}'s {@code default}.
+ */
+let ReactionMenu_; // eslint-disable-line prefer-const
+
+/**
+ * Implements a React {@code Component} with some extra actions in addition to
+ * those in the toolbar.
+ */
+class ReactionMenuDialog extends PureComponent<Props> {
+    /**
+     * Initializes a new {@code ReactionMenuDialog} instance.
+     *
+     * @inheritdoc
+     */
+    constructor(props: Props) {
+        super(props);
+
+        // Bind event handlers so they are only bound once per instance.
+        this._onCancel = this._onCancel.bind(this);
+    }
+
+    /**
+     * Implements React's {@link Component#render()}.
+     *
+     * @inheritdoc
+     * @returns {ReactElement}
+     */
+    render() {
+        const { _styles, _width, _height, _participantCount } = this.props;
+
+        return (
+            <SafeAreaView style = { _styles }>
+                <TouchableWithoutFeedback
+                    onPress = { this._onCancel }>
+                    <View style = { _styles }>
+                        <View
+                            style = {{
+                                left: (_width - 360) / 2,
+                                top: _height - (_participantCount > 1 ? 144 : 80) - 80
+                            }}>
+                            <ReactionMenu
+                                onCancel = { this._onCancel }
+                                overflowMenu = { false } />
+                        </View>
+                    </View>
+                </TouchableWithoutFeedback>
+            </SafeAreaView>
+        );
+    }
+
+    _onCancel: () => boolean;
+
+    /**
+     * Hides this {@code ReactionMenuDialog}.
+     *
+     * @private
+     * @returns {boolean}
+     */
+    _onCancel() {
+        if (this.props._isOpen) {
+            this.props.dispatch(hideDialog(ReactionMenu_));
+
+            return true;
+        }
+
+        return false;
+    }
+}
+
+/**
+ * Function that maps parts of Redux state tree into component props.
+ *
+ * @param {Object} state - Redux state.
+ * @private
+ * @returns {Props}
+ */
+function _mapStateToProps(state) {
+    return {
+        _isOpen: isDialogOpen(state, ReactionMenu_),
+        _styles: ColorSchemeRegistry.get(state, 'Toolbox').reactionDialog,
+        _width: state['features/base/responsive-ui'].clientWidth,
+        _height: state['features/base/responsive-ui'].clientHeight,
+        _participantCount: getParticipantCount(state)
+    };
+}
+
+ReactionMenu_ = connect(_mapStateToProps)(ReactionMenuDialog);
+
+export default ReactionMenu_;
diff --git a/react/features/reactions/components/native/ReactionsMenuButton.js b/react/features/reactions/components/native/ReactionsMenuButton.js
new file mode 100644
index 000000000..546a77159
--- /dev/null
+++ b/react/features/reactions/components/native/ReactionsMenuButton.js
@@ -0,0 +1,90 @@
+// @flow
+
+import { type Dispatch } from 'redux';
+
+import { isDialogOpen, openDialog } from '../../../base/dialog';
+import { RAISE_HAND_ENABLED, getFeatureFlag } from '../../../base/flags';
+import { translate } from '../../../base/i18n';
+import { IconRaisedHand } from '../../../base/icons';
+import {
+    getLocalParticipant
+} from '../../../base/participants';
+import { connect } from '../../../base/redux';
+import { AbstractButton, type AbstractButtonProps } from '../../../base/toolbox/components';
+
+import ReactionMenuDialog from './ReactionMenuDialog';
+
+/**
+ * The type of the React {@code Component} props of {@link ReactionsMenuButton}.
+ */
+type Props = AbstractButtonProps & {
+
+    /**
+     * Whether the participant raised their hand or not.
+     */
+    _raisedHand: boolean,
+
+    /**
+     * Whether or not the reactions menu is open.
+     */
+    _reactionsOpen: boolean,
+
+    /**
+     * The redux {@code dispatch} function.
+     */
+    dispatch: Dispatch<any>
+};
+
+/**
+ * An implementation of a button to raise or lower hand.
+ */
+class ReactionsMenuButton extends AbstractButton<Props, *> {
+    accessibilityLabel = 'toolbar.accessibilityLabel.reactionsMenu';
+    icon = IconRaisedHand;
+    label = 'toolbar.openReactionsMenu';
+    toggledLabel = 'toolbar.closeReactionsMenu';
+
+    /**
+     * Handles clicking / pressing the button.
+     *
+     * @override
+     * @protected
+     * @returns {void}
+     */
+    _handleClick() {
+        this.props.dispatch(openDialog(ReactionMenuDialog));
+    }
+
+    /**
+     * Indicates whether this button is in toggled state or not.
+     *
+     * @override
+     * @protected
+     * @returns {boolean}
+     */
+    _isToggled() {
+        return this.props._raisedHand || this.props._reactionsOpen;
+    }
+}
+
+/**
+ * Maps part of the Redux state to the props of this component.
+ *
+ * @param {Object} state - The Redux state.
+ * @param {Object} ownProps - The properties explicitly passed to the component instance.
+ * @private
+ * @returns {Props}
+ */
+function _mapStateToProps(state, ownProps): Object {
+    const _localParticipant = getLocalParticipant(state);
+    const enabled = getFeatureFlag(state, RAISE_HAND_ENABLED, true);
+    const { visible = enabled } = ownProps;
+
+    return {
+        _raisedHand: _localParticipant.raisedHand,
+        _reactionsOpen: isDialogOpen(state, ReactionMenuDialog),
+        visible
+    };
+}
+
+export default translate(connect(_mapStateToProps)(ReactionsMenuButton));
diff --git a/react/features/reactions/components/native/index.js b/react/features/reactions/components/native/index.js
new file mode 100644
index 000000000..4a2bef910
--- /dev/null
+++ b/react/features/reactions/components/native/index.js
@@ -0,0 +1,3 @@
+export { default as ReactionsMenuButton } from './ReactionsMenuButton';
+export { default as ReactionEmoji } from './ReactionEmoji';
+export { default as ReactionMenu } from './ReactionMenu';
diff --git a/react/features/reactions/components/web/ReactionButton.js b/react/features/reactions/components/web/ReactionButton.js
new file mode 100644
index 000000000..3a7ed0529
--- /dev/null
+++ b/react/features/reactions/components/web/ReactionButton.js
@@ -0,0 +1,125 @@
+/* @flow */
+
+import React from 'react';
+
+import { Tooltip } from '../../../base/tooltip';
+import AbstractToolbarButton from '../../../toolbox/components/AbstractToolbarButton';
+import type { Props as AbstractToolbarButtonProps } from '../../../toolbox/components/AbstractToolbarButton';
+
+/**
+ * The type of the React {@code Component} props of {@link ReactionButton}.
+ */
+type Props = AbstractToolbarButtonProps & {
+
+    /**
+     * Optional text to display in the tooltip.
+     */
+    tooltip?: string,
+
+    /**
+     * From which direction the tooltip should appear, relative to the
+     * button.
+     */
+    tooltipPosition: string,
+
+    /**
+     * Optional label for the button
+     */
+    label?: string
+};
+
+/**
+ * Represents a button in the reactions menu.
+ *
+ * @extends AbstractToolbarButton
+ */
+class ReactionButton extends AbstractToolbarButton<Props> {
+    /**
+     * Default values for {@code ReactionButton} component's properties.
+     *
+     * @static
+     */
+    static defaultProps = {
+        tooltipPosition: 'top'
+    };
+
+    /**
+     * Initializes a new {@code ReactionButton} instance.
+     *
+     * @inheritdoc
+     */
+    constructor(props: Props) {
+        super(props);
+
+        this._onKeyDown = this._onKeyDown.bind(this);
+    }
+
+    _onKeyDown: (Object) => void;
+
+    /**
+     * Handles 'Enter' key on the button to trigger onClick for accessibility.
+     * We should be handling Space onKeyUp but it conflicts with PTT.
+     *
+     * @param {Object} event - The key event.
+     * @private
+     * @returns {void}
+     */
+    _onKeyDown(event) {
+        // If the event coming to the dialog has been subject to preventDefault
+        // we don't handle it here.
+        if (event.defaultPrevented) {
+            return;
+        }
+
+        if (event.key === 'Enter') {
+            event.preventDefault();
+            event.stopPropagation();
+            this.props.onClick();
+        }
+    }
+
+    /**
+     * Renders the button of this {@code ReactionButton}.
+     *
+     * @param {Object} children - The children, if any, to be rendered inside
+     * the button. Presumably, contains the emoji of this {@code ReactionButton}.
+     * @protected
+     * @returns {ReactElement} The button of this {@code ReactionButton}.
+     */
+    _renderButton(children) {
+        return (
+            <div
+                aria-label = { this.props.accessibilityLabel }
+                aria-pressed = { this.props.toggled }
+                className = 'toolbox-button'
+                onClick = { this.props.onClick }
+                onKeyDown = { this._onKeyDown }
+                role = 'button'
+                tabIndex = { 0 }>
+                { this.props.tooltip
+                    ? <Tooltip
+                        content = { this.props.tooltip }
+                        position = { this.props.tooltipPosition }>
+                        { children }
+                    </Tooltip>
+                    : children }
+            </div>
+        );
+    }
+
+    /**
+     * Renders the icon (emoji) of this {@code reactionButton}.
+     *
+     * @inheritdoc
+     */
+    _renderIcon() {
+        return (
+            <div className = { `toolbox-icon ${this.props.toggled ? 'toggled' : ''}` }>
+                <span className = 'emoji'>{this.props.icon}</span>
+                {this.props.label && <span className = 'text'>{this.props.label}</span>}
+            </div>
+        );
+    }
+}
+
+export default ReactionButton;
diff --git a/react/features/reactions/components/web/ReactionEmoji.js b/react/features/reactions/components/web/ReactionEmoji.js
new file mode 100644
index 000000000..deba0907d
--- /dev/null
+++ b/react/features/reactions/components/web/ReactionEmoji.js
@@ -0,0 +1,96 @@
+// @flow
+
+import React, { Component } from 'react';
+
+import { connect } from '../../../base/redux';
+import { removeReaction } from '../../actions.any';
+import { REACTIONS } from '../../constants';
+
+type Props = {
+
+    /**
+     * Reaction to be displayed.
+     */
+    reaction: string,
+
+    /**
+     * Id of the reaction.
+     */
+    uid: Number,
+
+    /**
+     * Removes reaction from redux state.
+     */
+    removeReaction: Function,
+
+    /**
+     * Index of the reaction in the queue.
+     */
+    index: number
+};
+
+type State = {
+
+    /**
+     * Index of CSS animation. Number between 0-20.
+     */
+    index: number
+}
+
+
+/**
+ * Used to display animated reactions.
+ *
+ * @returns {ReactElement}
+ */
+class ReactionEmoji extends Component<Props, State> {
+    /**
+     * Initializes a new {@code ReactionEmoji} instance.
+     *
+     * @param {Props} props - The read-only React {@code Component} props with
+     * which the new instance is to be initialized.
+     */
+    constructor(props: Props) {
+        super(props);
+
+        this.state = {
+            index: props.index % 21
+        };
+    }
+
+    /**
+     * Implements React Component's componentDidMount.
+     *
+     * @inheritdoc
+     */
+    componentDidMount() {
+        setTimeout(() => this.props.removeReaction(this.props.uid), 5000);
+    }
+
+    /**
+     * Implements React's {@link Component#render}.
+     *
+     * @inheritdoc
+     */
+    render() {
+        const { reaction, uid } = this.props;
+        const { index } = this.state;
+
+        return (
+            <div
+                className = { `reaction-emoji reaction-${index}` }
+                id = { uid }>
+                { REACTIONS[reaction].emoji }
+            </div>
+        );
+    }
+}
+
+const mapDispatchToProps = {
+    removeReaction
+};
+
+export default connect(
+    null,
+    mapDispatchToProps,
+)(ReactionEmoji);
diff --git a/react/features/reactions/components/web/ReactionsMenu.js b/react/features/reactions/components/web/ReactionsMenu.js
new file mode 100644
index 000000000..23f67a2b1
--- /dev/null
+++ b/react/features/reactions/components/web/ReactionsMenu.js
@@ -0,0 +1,242 @@
+// @flow
+
+import React, { Component } from 'react';
+import { bindActionCreators } from 'redux';
+
+import {
+    createReactionMenuEvent,
+    createToolbarEvent,
+    sendAnalytics
+} from '../../../analytics';
+import { translate } from '../../../base/i18n';
+import { getLocalParticipant, getParticipantCount, participantUpdated } from '../../../base/participants';
+import { connect } from '../../../base/redux';
+import { dockToolbox } from '../../../toolbox/actions.web';
+import { addReactionToBuffer } from '../../actions.any';
+import { toggleReactionsMenuVisibility } from '../../actions.web';
+import { REACTIONS } from '../../constants';
+
+import ReactionButton from './ReactionButton';
+
+type Props = {
+
+    /**
+     * The number of conference participants.
+     */
+    _participantCount: number,
+
+    /**
+     * Used for translation.
+     */
+    t: Function,
+
+    /**
+     * Whether or not the local participant's hand is raised.
+     */
+    _raisedHand: boolean,
+
+    /**
+     * The ID of the local participant.
+     */
+    _localParticipantID: String,
+
+    /**
+     * The Redux Dispatch function.
+     */
+    dispatch: Function,
+
+    /**
+     * Docks the toolbox
+     */
+    _dockToolbox: Function,
+
+    /**
+     * Whether or not it's displayed in the overflow menu.
+     */
+    overflowMenu: boolean
+};
+
+declare var APP: Object;
+
+/**
+ * Implements the reactions menu.
+ *
+ * @returns {ReactElement}
+ */
+class ReactionsMenu extends Component<Props> {
+    /**
+     * Initializes a new {@code ReactionsMenu} instance.
+     *
+     * @param {Props} props - The read-only React {@code Component} props with
+     * which the new instance is to be initialized.
+     */
+    constructor(props: Props) {
+        super(props);
+
+        this._onToolbarToggleRaiseHand = this._onToolbarToggleRaiseHand.bind(this);
+        this._getReactionButtons = this._getReactionButtons.bind(this);
+    }
+
+    _onToolbarToggleRaiseHand: () => void;
+
+    _getReactionButtons: () => Array<React$Element<*>>;
+
+    /**
+     * Implements React Component's componentDidMount.
+     *
+     * @inheritdoc
+     */
+    componentDidMount() {
+        this.props._dockToolbox(true);
+    }
+
+    /**
+     * Implements React Component's componentWillUnmount.
+     *
+     * @inheritdoc
+     */
+    componentWillUnmount() {
+        this.props._dockToolbox(false);
+    }
+
+    /**
+     * Creates an analytics toolbar event and dispatches an action for toggling
+     * raise hand.
+     *
+     * @returns {void}
+     */
+    _onToolbarToggleRaiseHand() {
+        sendAnalytics(createToolbarEvent(
+            'raise.hand',
+            { enable: !this.props._raisedHand }));
+        this._doToggleRaiseHand();
+        this.props.dispatch(toggleReactionsMenuVisibility());
+    }
+
+    /**
+     * Dispatches an action to toggle the local participant's raised hand state.
+     *
+     * @private
+     * @returns {void}
+     */
+    _doToggleRaiseHand() {
+        const { _localParticipantID, _raisedHand } = this.props;
+        const newRaisedStatus = !_raisedHand;
+
+        this.props.dispatch(participantUpdated({
+            // XXX Only the local participant is allowed to update without
+            // stating the JitsiConference instance (i.e. participant property
+            // `conference` for a remote participant) because the local
+            // participant is uniquely identified by the very fact that there is
+            // only one local participant.
+
+            id: _localParticipantID,
+            local: true,
+            raisedHand: newRaisedStatus
+        }));
+
+        APP.API.notifyRaiseHandUpdated(_localParticipantID, newRaisedStatus);
+    }
+
+    /**
+     * Returns the emoji reaction buttons.
+     *
+     * @returns {Array}
+     */
+    _getReactionButtons() {
+        const { t, dispatch } = this.props;
+        let modifierKey = 'Alt';
+
+        if (window.navigator?.platform) {
+            if (window.navigator.platform.indexOf('Mac') !== -1) {
+                modifierKey = '⌥';
+            }
+        }
+
+        return Object.keys(REACTIONS).map(key => {
+            /**
+             * Sends reaction message.
+             *
+             * @returns {void}
+             */
+            function doSendReaction() {
+                dispatch(addReactionToBuffer(key));
+                sendAnalytics(createReactionMenuEvent(key));
+            }
+
+            return (<ReactionButton
+                accessibilityLabel = { t(`toolbar.accessibilityLabel.${key}`) }
+                icon = { REACTIONS[key].emoji }
+                key = { key }
+                onClick = { doSendReaction }
+                toggled = { false }
+                tooltip = { `${t(`toolbar.${key}`)} (${modifierKey} + ${REACTIONS[key].shortcutChar})` } />);
+        });
+    }
+
+    /**
+     * Implements React's {@link Component#render}.
+     *
+     * @inheritdoc
+     */
+    render() {
+        const { _participantCount, _raisedHand, t, overflowMenu } = this.props;
+
+        return (
+            <div className = { `reactions-menu ${overflowMenu ? 'overflow' : ''}` }>
+                { _participantCount > 1 && <div className = 'reactions-row'>
+                    { this._getReactionButtons() }
+                </div> }
+                <div className = 'raise-hand-row'>
+                    <ReactionButton
+                        accessibilityLabel = { t('toolbar.accessibilityLabel.raiseHand') }
+                        icon = '✋'
+                        key = 'raisehand'
+                        label = {
+                            `${t(`toolbar.${_raisedHand ? 'lowerYourHand' : 'raiseYourHand'}`)}
+                            ${overflowMenu ? '' : ' (R)'}`
+                        }
+                        onClick = { this._onToolbarToggleRaiseHand }
+                        toggled = { true } />
+                </div>
+            </div>
+        );
+    }
+}
+
+/**
+ * Function that maps parts of Redux state tree into component props.
+ *
+ * @param {Object} state - Redux state.
+ * @returns {Object}
+ */
+function mapStateToProps(state) {
+    const localParticipant = getLocalParticipant(state);
+
+    return {
+        _localParticipantID: localParticipant.id,
+        _raisedHand: localParticipant.raisedHand,
+        _participantCount: getParticipantCount(state)
+    };
+}
+
+/**
+ * Function that maps parts of Redux actions into component props.
+ *
+ * @param {Object} dispatch - Redux dispatch.
+ * @returns {Object}
+ */
+function mapDispatchToProps(dispatch) {
+    return {
+        dispatch,
+        ...bindActionCreators(
+        {
+            _dockToolbox: dockToolbox
+        }, dispatch)
+    };
+}
+
+export default translate(connect(
+    mapStateToProps,
+    mapDispatchToProps,
+)(ReactionsMenu));
diff --git a/react/features/reactions/components/web/ReactionsMenuButton.js b/react/features/reactions/components/web/ReactionsMenuButton.js
new file mode 100644
index 000000000..dde67b921
--- /dev/null
+++ b/react/features/reactions/components/web/ReactionsMenuButton.js
@@ -0,0 +1,112 @@
+// @flow
+
+import React from 'react';
+
+import { translate } from '../../../base/i18n';
+import { IconRaisedHand } from '../../../base/icons';
+import { getLocalParticipant } from '../../../base/participants';
+import { connect } from '../../../base/redux';
+import ToolbarButton from '../../../toolbox/components/web/ToolbarButton';
+import { toggleReactionsMenuVisibility } from '../../actions.web';
+import { type ReactionEmojiProps } from '../../constants';
+import { getReactionsQueue } from '../../functions.any';
+import { getReactionsMenuVisibility } from '../../functions.web';
+
+import ReactionEmoji from './ReactionEmoji';
+import ReactionsMenuPopup from './ReactionsMenuPopup';
+
+type Props = {
+
+    /**
+     * Used for translation.
+     */
+    t: Function,
+
+    /**
+     * Whether or not the local participant's hand is raised.
+     */
+    raisedHand: boolean,
+
+    /**
+     * Click handler for the reaction button. Toggles the reactions menu.
+     */
+    onReactionsClick: Function,
+
+    /**
+     * Whether or not the reactions menu is open.
+     */
+    isOpen: boolean,
+
+    /**
+     * The array of reactions to be displayed.
+     */
+    reactionsQueue: Array<ReactionEmojiProps>,
+
+    /**
+     * Redux dispatch function.
+     */
+    dispatch: Function
+};
+
+
+declare var APP: Object;
+
+/**
+ * Button used for the reactions menu.
+ *
+ * @returns {ReactElement}
+ */
+function ReactionsMenuButton({
+    t,
+    raisedHand,
+    isOpen,
+    reactionsQueue,
+    dispatch
+}: Props) {
+
+    /**
+     * Toggles the reactions menu visibility.
+     *
+     * @returns {void}
+     */
+    function toggleReactionsMenu() {
+        dispatch(toggleReactionsMenuVisibility());
+    }
+
+    return (
+        <div className = 'reactions-menu-popup-container'>
+            <ReactionsMenuPopup>
+                <ToolbarButton
+                    accessibilityLabel = { t('toolbar.accessibilityLabel.reactionsMenu') }
+                    icon = { IconRaisedHand }
+                    key = 'reactions'
+                    onClick = { toggleReactionsMenu }
+                    toggled = { raisedHand }
+                    tooltip = { t(`toolbar.${isOpen ? 'closeReactionsMenu' : 'openReactionsMenu'}`) } />
+            </ReactionsMenuPopup>
+            {reactionsQueue.map(({ reaction, uid }, index) => (<ReactionEmoji
+                index = { index }
+                key = { uid }
+                reaction = { reaction }
+                uid = { uid } />))}
+        </div>
+    );
+}
+
+/**
+ * Function that maps parts of Redux state tree into component props.
+ *
+ * @param {Object} state - Redux state.
+ * @returns {Object}
+ */
+function mapStateToProps(state) {
+    const localParticipant = getLocalParticipant(state);
+
+    return {
+        isOpen: getReactionsMenuVisibility(state),
+        reactionsQueue: getReactionsQueue(state),
+        raisedHand: localParticipant?.raisedHand
+    };
+}
+
+export default translate(connect(mapStateToProps)(ReactionsMenuButton));
diff --git a/react/features/reactions/components/web/ReactionsMenuPopup.js b/react/features/reactions/components/web/ReactionsMenuPopup.js
new file mode 100644
index 000000000..b328a71fd
--- /dev/null
+++ b/react/features/reactions/components/web/ReactionsMenuPopup.js
@@ -0,0 +1,58 @@
+// @flow
+
+import InlineDialog from '@atlaskit/inline-dialog';
+import React from 'react';
+import { useDispatch, useSelector } from 'react-redux';
+
+import { toggleReactionsMenuVisibility } from '../../actions.web';
+import { getReactionsMenuVisibility } from '../../functions.web';
+
+import ReactionsMenu from './ReactionsMenu';
+
+
+type Props = {
+
+    /**
+    * Component's children (the reactions menu button).
+    */
+    children: React$Node
+}
+
+/**
+ * Popup with reactions menu.
+ *
+ * @returns {ReactElement}
+ */
+function ReactionsMenuPopup({
+    children
+}: Props) {
+    /**
+    * Flag controlling the visibility of the popup.
+    */
+    const isOpen = useSelector(state => getReactionsMenuVisibility(state));
+
+    const dispatch = useDispatch();
+
+    /**
+     * Toggles reactions menu visibility.
+     *
+     * @returns {void}
+     */
+    function onClose() {
+        dispatch(toggleReactionsMenuVisibility());
+    }
+
+    return (
+        <div className = 'reactions-menu-popup'>
+            <InlineDialog
+                content = { <ReactionsMenu /> }
+                isOpen = { isOpen }
+                onClose = { onClose }
+                placement = 'top'>
+                {children}
+            </InlineDialog>
+        </div>
+    );
+}
+
+export default ReactionsMenuPopup;
diff --git a/react/features/reactions/components/web/index.js b/react/features/reactions/components/web/index.js
new file mode 100644
index 000000000..c63636541
--- /dev/null
+++ b/react/features/reactions/components/web/index.js
@@ -0,0 +1,7 @@
+// @flow
+
+export { default as ReactionButton } from './ReactionButton';
+export { default as ReactionEmoji } from './ReactionEmoji';
+export { default as ReactionsMenu } from './ReactionsMenu';
+export { default as ReactionsMenuButton } from './ReactionsMenuButton';
+export { default as ReactionsMenuPopup } from './ReactionsMenuPopup';
diff --git a/react/features/reactions/constants.js b/react/features/reactions/constants.js
new file mode 100644
index 000000000..91b3220f4
--- /dev/null
+++ b/react/features/reactions/constants.js
@@ -0,0 +1,47 @@
+// @flow
+
+export const REACTIONS = {
+    like: {
+        message: ':thumbs_up:',
+        emoji: '👍',
+        shortcutChar: 'T'
+    },
+    clap: {
+        message: ':clap:',
+        emoji: '👏',
+        shortcutChar: 'C'
+    },
+    laugh: {
+        message: ':grinning_face:',
+        emoji: '😀',
+        shortcutChar: 'L'
+    },
+    surprised: {
+        message: ':face_with_open_mouth:',
+        emoji: '😮',
+        shortcutChar: 'O'
+    },
+    boo: {
+        message: ':slightly_frowning_face:',
+        emoji: '🙁',
+        shortcutChar: 'B'
+    },
+    party: {
+        message: ':party_popper:',
+        emoji: '🎉',
+        shortcutChar: 'P'
+    }
+};
+
+export type ReactionEmojiProps = {
+
+    /**
+     * Reaction to be displayed.
+     */
+    reaction: string,
+
+    /**
+     * Id of the reaction.
+     */
+    uid: number
+}
diff --git a/react/features/reactions/functions.any.js b/react/features/reactions/functions.any.js
new file mode 100644
index 000000000..7fb0bcb6a
--- /dev/null
+++ b/react/features/reactions/functions.any.js
@@ -0,0 +1,90 @@
+// @flow
+
+import uuid from 'uuid';
+
+import { getLocalParticipant } from '../base/participants';
+import { extractFqnFromPath } from '../dynamic-branding/functions';
+
+import { REACTIONS } from './constants';
+import logger from './logger';
+
+/**
+ * Returns the queue of reactions.
+ *
+ * @param {Object} state - The state of the application.
+ * @returns {boolean}
+ */
+export function getReactionsQueue(state: Object) {
+    return state['features/reactions'].queue;
+}
+
+/**
+ * Returns chat message from reactions buffer.
+ *
+ * @param {Array} buffer - The reactions buffer.
+ * @returns {string}
+ */
+export function getReactionMessageFromBuffer(buffer: Array<string>) {
+    return buffer.map(reaction => REACTIONS[reaction].message).reduce((acc, val) => `${acc}${val}`);
+}
+
+/**
+ * Returns reactions array with uid.
+ *
+ * @param {Array} buffer - The reactions buffer.
+ * @returns {Array}
+ */
+export function getReactionsWithId(buffer: Array<string>) {
+    return buffer.map<Object>(reaction => {
+        return {
+            reaction,
+            uid: uuid.v4()
+        };
+    });
+}
+
+/**
+ * Sends reactions to the backend.
+ *
+ * @param {Object} state - The redux state object.
+ * @param {Array} reactions - Reactions array to be sent.
+ * @returns {void}
+ */
+export async function sendReactionsWebhook(state: Object, reactions: Array<?string>) {
+    const { webhookProxyUrl: url } = state['features/base/config'];
+    const { conference } = state['features/base/conference'];
+    const { jwt } = state['features/base/jwt'];
+    const { locationURL } = state['features/base/connection'];
+    const localParticipant = getLocalParticipant(state);
+
+    const headers = {
+        'Authorization': `Bearer ${jwt}`,
+        'Content-Type': 'application/json'
+    };
+
+
+    const reqBody = {
+        meetingFqn: extractFqnFromPath(locationURL.pathname),
+        sessionId: conference.sessionId,
+        submitted: Date.now(),
+        reactions,
+        participantId: localParticipant.id,
+        participantName: localParticipant.name
+    };
+
+    if (url) {
+        try {
+            const res = await fetch(`${url}/reactions`, {
+                method: 'POST',
+                headers,
+                body: JSON.stringify(reqBody)
+            });
+
+            if (!res.ok) {
+                logger.error('Status error:', res.status);
+            }
+        } catch (err) {
+            logger.error('Could not send request', err);
+        }
+    }
+}
diff --git a/react/features/reactions/functions.web.js b/react/features/reactions/functions.web.js
new file mode 100644
index 000000000..60c89adc0
--- /dev/null
+++ b/react/features/reactions/functions.web.js
@@ -0,0 +1,11 @@
+// @flow
+
+/**
+ * Returns the visibility state of the reactions menu.
+ *
+ * @param {Object} state - The state of the application.
+ * @returns {boolean}
+ */
+export function getReactionsMenuVisibility(state: Object) {
+    return state['features/reactions'].visible;
+}
diff --git a/react/features/reactions/logger.js b/react/features/reactions/logger.js
new file mode 100644
index 000000000..dab71f218
--- /dev/null
+++ b/react/features/reactions/logger.js
@@ -0,0 +1,5 @@
+// @flow
+
+import { getLogger } from '../base/logging/functions';
+
+export default getLogger('features/base/reactions');
diff --git a/react/features/reactions/middleware.js b/react/features/reactions/middleware.js
new file mode 100644
index 000000000..ed3d94e18
--- /dev/null
+++ b/react/features/reactions/middleware.js
@@ -0,0 +1,93 @@
+// @flow
+
+import { batch } from 'react-redux';
+
+import { ENDPOINT_REACTION_NAME } from '../../../modules/API/constants';
+import { MiddlewareRegistry } from '../base/redux';
+import { isVpaasMeeting } from '../jaas/functions';
+
+import {
+    ADD_REACTION_BUFFER,
+    FLUSH_REACTION_BUFFER,
+    SEND_REACTIONS,
+    PUSH_REACTIONS
+} from './actionTypes';
+import {
+    addReactionsToChat,
+    flushReactionBuffer,
+    pushReactions,
+    sendReactions,
+    setReactionQueue
+} from './actions.any';
+import { getReactionMessageFromBuffer, getReactionsWithId, sendReactionsWebhook } from './functions.any';
+
+
+declare var APP: Object;
+
+/**
+ * Middleware which intercepts Reactions actions to handle changes to the
+ * visibility timeout of the Reactions.
+ *
+ * @param {Store} store - The redux store.
+ * @returns {Function}
+ */
+MiddlewareRegistry.register(store => next => action => {
+    const { dispatch, getState } = store;
+
+    switch (action.type) {
+    case ADD_REACTION_BUFFER: {
+        const { timeoutID, buffer } = getState()['features/reactions'];
+        const { reaction } = action;
+
+        clearTimeout(timeoutID);
+        buffer.push(reaction);
+        action.buffer = buffer;
+        action.timeoutID = setTimeout(() => {
+            dispatch(flushReactionBuffer());
+        }, 500);
+
+        break;
+    }
+
+    case FLUSH_REACTION_BUFFER: {
+        const state = getState();
+        const { buffer } = state['features/reactions'];
+
+        batch(() => {
+            dispatch(sendReactions());
+            dispatch(addReactionsToChat(getReactionMessageFromBuffer(buffer)));
+            dispatch(pushReactions(buffer));
+        });
+
+        if (isVpaasMeeting(state)) {
+            sendReactionsWebhook(state, buffer);
+        }
+
+        break;
+    }
+
+    case SEND_REACTIONS: {
+        const state = getState();
+        const { buffer } = state['features/reactions'];
+        const { conference } = state['features/base/conference'];
+
+        if (conference) {
+            conference.sendEndpointMessage('', {
+                name: ENDPOINT_REACTION_NAME,
+                reactions: buffer,
+                timestamp: Date.now()
+            });
+        }
+        break;
+    }
+
+    case PUSH_REACTIONS: {
+        const queue = store.getState()['features/reactions'].queue;
+        const reactions = action.reactions;
+
+        dispatch(setReactionQueue([ ...queue, ...getReactionsWithId(reactions) ]));
+    }
+    }
+
+    return next(action);
+});
diff --git a/react/features/reactions/reducer.js b/react/features/reactions/reducer.js
new file mode 100644
index 000000000..dcb8bcf13
--- /dev/null
+++ b/react/features/reactions/reducer.js
@@ -0,0 +1,90 @@
+// @flow
+
+import { ReducerRegistry } from '../base/redux';
+
+import {
+    TOGGLE_REACTIONS_VISIBLE,
+    SET_REACTION_QUEUE,
+    ADD_REACTION_BUFFER,
+    FLUSH_REACTION_BUFFER
+} from './actionTypes';
+
+/**
+ * Returns initial state for reactions' part of Redux store.
+ *
+ * @private
+ * @returns {{
+ *     visible: boolean,
+ *     message: string,
+ *     timeoutID: number,
+ *     queue: Array
+ * }}
+ */
+function _getInitialState() {
+    return {
+        /**
+         * The indicator that determines whether the reactions menu is visible.
+         *
+         * @type {boolean}
+         */
+        visible: false,
+
+        /**
+         * An array that contains the reactions buffer to be sent.
+         *
+         * @type {Array}
+         */
+        buffer: [],
+
+        /**
+         * A number, non-zero value which identifies the timer created by a call
+         * to setTimeout().
+         *
+         * @type {number|null}
+         */
+        timeoutID: null,
+
+        /**
+         * The array of reactions to animate
+         *
+         * @type {Array}
+         */
+        queue: []
+    };
+}
+
+ReducerRegistry.register(
+    'features/reactions',
+    (state: Object = _getInitialState(), action: Object) => {
+        switch (action.type) {
+
+        case TOGGLE_REACTIONS_VISIBLE:
+            return {
+                ...state,
+                visible: !state.visible
+            };
+
+        case ADD_REACTION_BUFFER:
+            return {
+                ...state,
+                buffer: action.buffer,
+                timeoutID: action.timeoutID
+            };
+
+        case FLUSH_REACTION_BUFFER:
+            return {
+                ...state,
+                buffer: [],
+                timeoutID: null
+            };
+
+        case SET_REACTION_QUEUE: {
+            return {
+                ...state,
+                queue: action.value
+            };
+        }
+        }
+
+        return state;
+    });
diff --git a/react/features/settings/components/web/SoundsTab.js b/react/features/settings/components/web/SoundsTab.js
new file mode 100644
index 000000000..20cb7fb5a
--- /dev/null
+++ b/react/features/settings/components/web/SoundsTab.js
@@ -0,0 +1,123 @@
+// @flow
+
+import Checkbox from '@atlaskit/checkbox';
+import React from 'react';
+
+import { AbstractDialogTab } from '../../../base/dialog';
+import type { Props as AbstractDialogTabProps } from '../../../base/dialog';
+import { translate } from '../../../base/i18n';
+
+declare var APP: Object;
+
+/**
+ * The type of the React {@code Component} props of {@link SoundsTab}.
+ */
+export type Props = {
+    ...$Exact<AbstractDialogTabProps>,
+
+    /**
+     * Whether or not the sound for the incoming message should play.
+     */
+    soundsIncomingMessage: Boolean,
+
+    /**
+     * Whether or not the sound for the participant joined should play.
+     */
+    soundsParticipantJoined: Boolean,
+
+    /**
+     * Whether or not the sound for the participant left should play.
+     */
+    soundsParticipantLeft: Boolean,
+
+    /**
+     * Whether or not the sound for the talk while muted notification should play.
+     */
+    soundsTalkWhileMuted: Boolean,
+
+    /**
+     * Invoked to obtain translated strings.
+     */
+    t: Function
+}
+
+/**
+ * React {@code Component} for modifying the local user's sound settings.
+ *
+ * @extends Component
+ */
+class SoundsTab extends AbstractDialogTab<Props> {
+    /**
+     * Initializes a new {@code SoundsTab} instance.
+     *
+     * @param {Props} props - The React {@code Component} props to initialize
+     * the new {@code SoundsTab} instance with.
+     */
+    constructor(props: Props) {
+        super(props);
+
+        // Bind event handlers so they are only bound once for every instance.
+        this._onChange = this._onChange.bind(this);
+    }
+
+    _onChange: (Object) => void;
+
+    /**
+     * Changes a sound setting state.
+     *
+     * @param {Object} e - The key event to handle.
+     *
+     * @returns {void}
+     */
+    _onChange({ target }) {
+        super._onChange({ [target.name]: target.checked });
+    }
+
+    /**
+     * Implements React's {@link Component#render()}.
+     *
+     * @inheritdoc
+     * @returns {ReactElement}
+     */
+    render() {
+        const {
+            soundsIncomingMessage,
+            soundsParticipantJoined,
+            soundsParticipantLeft,
+            soundsTalkWhileMuted,
+            t
+        } = this.props;
+
+        return (
+            <div
+                className = 'settings-sub-pane-element'
+                key = 'sounds'>
+                <h2 className = 'mock-atlaskit-label'>
+                    {t('settings.playSounds')}
+                </h2>
+                <Checkbox
+                    isChecked = { soundsIncomingMessage }
+                    label = { t('settings.incomingMessage') }
+                    name = 'soundsIncomingMessage'
+                    onChange = { this._onChange } />
+                <Checkbox
+                    isChecked = { soundsParticipantJoined }
+                    label = { t('settings.participantJoined') }
+                    name = 'soundsParticipantJoined'
+                    onChange = { this._onChange } />
+                <Checkbox
+                    isChecked = { soundsParticipantLeft }
+                    label = { t('settings.participantLeft') }
+                    name = 'soundsParticipantLeft'
+                    onChange = { this._onChange } />
+                <Checkbox
+                    isChecked = { soundsTalkWhileMuted }
+                    label = { t('settings.talkWhileMuted') }
+                    name = 'soundsTalkWhileMuted'
+                    onChange = { this._onChange } />
+            </div>
+        );
+    }
+}
+
+export default translate(SoundsTab);
diff --git a/react/features/toolbox/components/web/ToggleCameraButton.js b/react/features/toolbox/components/web/ToggleCameraButton.js
new file mode 100644
index 000000000..60c2a0792
--- /dev/null
+++ b/react/features/toolbox/components/web/ToggleCameraButton.js
@@ -0,0 +1,75 @@
+// @flow
+
+import { translate } from '../../../base/i18n';
+import { IconCameraRefresh } from '../../../base/icons';
+import { connect } from '../../../base/redux';
+import { AbstractButton, type AbstractButtonProps } from '../../../base/toolbox/components';
+import { isLocalCameraTrackMuted, isToggleCameraEnabled, toggleCamera } from '../../../base/tracks';
+
+/**
+ * The type of the React {@code Component} props of {@link ToggleCameraButton}.
+ */
+type Props = AbstractButtonProps & {
+
+    /**
+     * Whether the current conference is in audio only mode or not.
+     */
+    _audioOnly: boolean,
+
+    /**
+     * Whether video is currently muted or not.
+     */
+    _videoMuted: boolean,
+
+    /**
+     * The Redux dispatch function.
+     */
+    dispatch: Function
+};
+
+/**
+ * An implementation of a button for toggling the camera facing mode.
+ */
+class ToggleCameraButton extends AbstractButton<Props, any> {
+    accessibilityLabel = 'toolbar.accessibilityLabel.toggleCamera';
+    icon = IconCameraRefresh;
+    label = 'toolbar.toggleCamera';
+
+    /**
+     * Handles clicking/pressing the button.
+     *
+     * @returns {void}
+     */
+    _handleClick() {
+        this.props.dispatch(toggleCamera());
+    }
+
+    /**
+     * Whether this button is disabled or not.
+     *
+     * @returns {boolean}
+     */
+    _isDisabled() {
+        return this.props._audioOnly || this.props._videoMuted;
+    }
+}
+
+/**
+ * Maps (parts of) the redux state to the associated props for the
+ * {@code ToggleCameraButton} component.
+ *
+ * @param {Object} state - The Redux state.
+ * @returns {Props}
+ */
+function mapStateToProps(state): Object {
+    const { enabled: audioOnly } = state['features/base/audio-only'];
+    const tracks = state['features/base/tracks'];
+
+    return {
+        _audioOnly: Boolean(audioOnly),
+        _videoMuted: isLocalCameraTrackMuted(tracks),
+        visible: isToggleCameraEnabled(state)
+    };
+}
+
+export default translate(connect(mapStateToProps)(ToggleCameraButton));
diff --git a/react/features/upload-ppt/actionTypes.js b/react/features/upload-ppt/actionTypes.js
new file mode 100644
index 000000000..357aa155a
--- /dev/null
+++ b/react/features/upload-ppt/actionTypes.js
@@ -0,0 +1,38 @@
+// @flow
+
+/**
+ * The type of the action which signals to update the current known state of the
+ * shared PPT.
+ *
+ * {
+ *     type: SET_UPLOAD_PPT_STATUS,
+ *     status: string
+ * }
+ */
+export const SET_UPLOAD_PPT_STATUS = 'SET_UPLOAD_PPT_STATUS';
+
+/**
+ * The type of the action which signals to reset the current known state of the
+ * shared PPT.
+ *
+ * {
+ *     type: RESET_SHARED_PPT_STATUS,
+ * }
+ */
+export const RESET_UPLOAD_PPT_STATUS = 'RESET_SHARED_PPT_STATUS';
+
+/**
+ * The type of the action which signals to disable or enable the shared PPT
+ * button.
+ *
+ * {
+ *     type: SET_DISABLE_BUTTON
+ * }
+ */
+export const SET_DISABLE_BUTTON = 'SET_DISABLE_BUTTON';
+
+export const RETRY_UPLOAD = 'RETRY_UPLOAD'
+
+export const SET_UPLOADING = 'SET_UPLOADING'
+
+export const TRY_UPLOAD = 'TRY_UPLOAD'
diff --git a/react/features/upload-ppt/actions.any.js b/react/features/upload-ppt/actions.any.js
new file mode 100644
index 000000000..3238e59fb
--- /dev/null
+++ b/react/features/upload-ppt/actions.any.js
@@ -0,0 +1,58 @@
+import { getCurrentConference } from '../base/conference';
+import { openDialog } from '../base/dialog/actions';
+import { getLocalParticipant } from '../base/participants';
+import { UploadPPTDialog } from './components';
+
+import { RESET_UPLOAD_PPT_STATUS, SET_UPLOAD_PPT_STATUS, RETRY_UPLOAD, TRY_UPLOAD } from './actionTypes';
+
+/**
+ * Resets the status of the upload PPT.
+ *
+ * @returns {{
+ *     type: RESET_UPLOAD_PPT_STATUS,
+ * }}
+ */
+export function resetUploadPPTStatus() {
+    return {
+        type: RESET_UPLOAD_PPT_STATUS
+    };
+}
+
+
+export function setUploadPPTStatus(file) {
+    return (dispatch, getState) => {
+    
+        const conference = getCurrentConference(getState());
+
+        if (conference) {
+            const localParticipant = getLocalParticipant(getState());
+            dispatch({
+                type: TRY_UPLOAD,
+                file,
+                ownerId: localParticipant.id
+            });
+        }
+    };
+}
+/**
+ * Displays the dialog for uploading presentation.
+ *
+ * @returns {Function}
+ */
+export function showUploadPPTDialog(onPostSubmit) {
+    return openDialog(UploadPPTDialog, { onPostSubmit });
+}
+
+/**
+ *
+ * Toggles the upload presentation button.
+ *
+ * @returns {Function}
+ */
+export function toggleUploadPresentation() {
+    return (dispatch, getState) => {
+        const state = getState();
+        const { status } = state['features/upload-ppt'];
+            dispatch(showUploadPPTDialog( file => dispatch(setUploadPPTStatus(file))));
+    };
+}
diff --git a/react/features/upload-ppt/actions.native.js b/react/features/upload-ppt/actions.native.js
new file mode 100644
index 000000000..3f438538a
--- /dev/null
+++ b/react/features/upload-ppt/actions.native.js
@@ -0,0 +1 @@
+export * from './actions.any';
\ No newline at end of file
diff --git a/react/features/upload-ppt/components/AbstractUploadPPTDialog.js b/react/features/upload-ppt/components/AbstractUploadPPTDialog.js
new file mode 100644
index 000000000..c93b7a8f6
--- /dev/null
+++ b/react/features/upload-ppt/components/AbstractUploadPPTDialog.js
@@ -0,0 +1,43 @@
+// @flow
+
+import { Component } from 'react';
+import type { Dispatch } from 'redux';
+
+/**
+ * The type of the React {@code Component} props of
+ * {@link AbstractSharedPPTDialog}.
+ */
+export type Props = {
+
+    /**
+     * Invoked to update the shared video link.
+     */
+    dispatch: Dispatch<any>,
+
+    /**
+     * Function to be invoked after typing a valid video.
+     */
+    onPostSubmit: Function,
+
+    /**
+     * Invoked to obtain translated strings.
+     */
+    t: Function
+};
+
+/**
+ * Implements an abstract class for {@code UploadPPTDialog}.
+ */
+export default class AbstractUploadPPTDialog<S: *> extends Component < Props, S > {
+
+    /**
+     * Instantiates a new component.
+     *
+     * @inheritdoc
+     */
+    constructor(props: Props) {
+        super(props);
+
+    }
+
+}
diff --git a/react/features/upload-ppt/components/_.native.js b/react/features/upload-ppt/components/_.native.js
new file mode 100644
index 000000000..e9c52f138
--- /dev/null
+++ b/react/features/upload-ppt/components/_.native.js
@@ -0,0 +1 @@
+export * from './native';
\ No newline at end of file
diff --git a/react/features/upload-ppt/components/index.js b/react/features/upload-ppt/components/index.js
new file mode 100644
index 000000000..cda61441e
--- /dev/null
+++ b/react/features/upload-ppt/components/index.js
@@ -0,0 +1 @@
+export * from './_';
diff --git a/react/features/upload-ppt/components/native/UploadPPTDialog.js b/react/features/upload-ppt/components/native/UploadPPTDialog.js
new file mode 100644
index 000000000..deda098ec
--- /dev/null
+++ b/react/features/upload-ppt/components/native/UploadPPTDialog.js
@@ -0,0 +1,125 @@
+// @flow
+
+import React from 'react';
+import { View, Text, TouchableOpacity } from 'react-native';
+
+import { CustomSubmitDialog} from '../../../base/dialog';
+import { connect } from '../../../base/redux';
+import styles from './styles'
+import AbstractUploadPPTDialog from '../AbstractUploadPPTDialog';
+
+import FilePickerManager from 'react-native-file-picker';
+
+/**
+ * Implements a component to render ppt upload dialog
+ */
+class UploadPPTDialog extends AbstractUploadPPTDialog<*> {
+  
+    state = {
+        file: {}
+    };
+
+    getFilename(){
+      const {fileName="No file chosen"}=this.state.file
+      return fileName
+    }
+
+
+    selectFileTapped() {
+        const options = {
+          title: 'File Picker',
+          chooseFileButtonTitle: 'Choose File...'
+        };
+    
+        FilePickerManager.showFilePicker(options, (response) => {
+          console.log('Response = ', response);
+
+          if (response.didCancel) {
+            console.log('User cancelled file picker');
+          }
+          else if (response.error) {
+            console.log('FilePickerManager Error: ', response.error);
+          }
+          else if (response.customButton) {
+            console.log('User tapped custom button: ', response.customButton);
+          }
+          else {
+            this.setState({
+              file: response
+            });
+          }
+        });
+      }
+
+    //validate whether the file is a .ppt or .pptx type
+    _validated = ()=>{
+      let re =  /.*\.pptx?$/
+      return re.test(this.getFilename())
+    }
+
+    _invalidFile = () =>{
+      if(Object.keys(this.state.file).length === 0) return null
+      return this._validated() ? null:<Text style = { styles.invalidFile }>please select a ppt or pptx file</Text>
+    }
+ 
+
+    /**
+     * Implements React's {@link Component#render()}.
+     *
+     * @inheritdoc
+     */
+    render() {
+        return (
+            <CustomSubmitDialog
+                okDisabled={ !this._validated() }
+                okKey="Submit"
+                onCancel = { this._onCancel }
+                onSubmit = { this._toggleUploadPPT.bind(this) }>
+                  
+                <View style= { styles.container }>
+                  <Text style= { styles.title }>Upload a presentation</Text>
+                  <View style={ styles.upload } >
+                    <Text style={ styles.fileInfo }>{ this.getFilename() }</Text>
+                    <TouchableOpacity style = { styles.button } onPress={this.selectFileTapped.bind(this)}>
+                        <Text>Choose file...</Text>
+                    </TouchableOpacity>
+                  </View>   
+                  {this._invalidFile()}
+                </View>  
+            </CustomSubmitDialog>
+        );
+    }
+
+    /**
+    * It returns a boolean to comply the Dialog behaviour:
+    *     {@code true} - the dialog should be closed.
+    *     {@code false} - the dialog should be left open.
+    */
+        _toggleUploadPPT() {
+
+          const { onPostSubmit } = this.props;
+
+          onPostSubmit && onPostSubmit(this.state.file);
+
+          return false;
+      }
+  }
+
+ /**
+ * Maps part of the Redux state to the props of this component.
+ *
+ * @param {Object} state - The Redux state.
+ * @param {Object} ownProps - The properties explicitly passed to the component instance.
+ * @private
+ * @returns {Props}
+ */
+function _mapStateToProps(state, ownProps): Object {
+  const { failed = false, loading = false} = state['features/upload-ppt'];
+
+  return {
+     uploadFailed: failed,
+     uploading: loading
+  };
+}
+
+export default connect(_mapStateToProps)(UploadPPTDialog);
diff --git a/react/features/upload-ppt/components/native/UploadPresentationButton.js b/react/features/upload-ppt/components/native/UploadPresentationButton.js
new file mode 100644
index 000000000..42375ac39
--- /dev/null
+++ b/react/features/upload-ppt/components/native/UploadPresentationButton.js
@@ -0,0 +1,120 @@
+// @flow
+import type { Dispatch } from 'redux';
+
+
+import { translate } from '../../../base/i18n';
+import { IconPPT } from '../../../base/icons';
+import { connect } from '../../../base/redux';
+import { getLocalParticipant } from '../../../base/participants';
+import { AbstractButton, type AbstractButtonProps } from '../../../base/toolbox/components';
+import { toggleUploadPresentation } from '../../actions.native';
+import { getFeatureFlag, UPLOAD_PPT_ENABLED } from '../../../base/flags';
+import { Alert } from 'react-native';
+
+
+
+/**
+ * The type of the React {@code Component} props of {@link TileViewButton}.
+ */
+ type Props = AbstractButtonProps & {
+
+    /**
+     * Whether or not the button is disabled.
+     */
+    _isDisabled: boolean,
+
+    /**
+     * The redux {@code dispatch} function.
+     */
+    dispatch: Dispatch<any>
+};
+
+/**
+ * Component that renders an upload presentation button..
+ *
+ * @extends AbstractButton
+ */
+class UploadPresentationButton extends AbstractButton<Props, *> {
+    accessibilityLabel = 'toolbar.accessibilityLabel.uploadPresentation';
+    icon = IconPPT;
+    label = 'toolbar.uploadPresentation';
+    toggledLabel= 'toggled';
+
+    /**
+     * Handles clicking / pressing the button.
+     *
+     * @override
+     * @protected
+     * @returns {void}
+     */
+    _handleClick() {
+        this._doToggleUploadPresentation()
+    }
+
+
+        /**
+     * Indicates whether this button is in toggled state or not.
+     *
+     * @override
+     * @protected
+     * @returns {boolean}
+     */
+    _isToggled() {
+         return this.props._sharingPPT;
+    }
+    
+
+    /**
+     * Indicates whether this button is disabled or not.
+     *
+     * @override
+     * @protected
+     * @returns {boolean}
+     */
+    _isDisabled() {
+        return this.props._isDisabled;
+    }
+    
+
+    /**
+     * Dispatches an action to toggle presentation upload.
+     *
+     * @private
+     * @returns {void}
+     */
+    _doToggleUploadPresentation(){
+        this.props.dispatch(toggleUploadPresentation())
+    }
+}
+
+
+/**
+ * Maps part of the Redux state to the props of this component.
+ *
+ * @param {Object} state - The Redux state.
+ * @param {Object} ownProps - The properties explicitly passed to the component instance.
+ * @private
+ * @returns {Props}
+ */
+ function _mapStateToProps(state, ownProps): Object {
+    const { ownerId, status } = state['features/upload-ppt'];
+    const localParticipantId = getLocalParticipant(state).id;
+    const enabled = getFeatureFlag(state, UPLOAD_PPT_ENABLED, true);
+    const { visible = enabled } = ownProps;
+
+    if (ownerId !== localParticipantId) {
+        return {
+            _isDisabled: sharedPPTStatus,
+            // _sharingPPT: false,
+            visible
+        };
+    }
+
+    return {
+        _isDisabled: false,
+        // _sharingPPT: sharedPPTStatus,
+        visible
+    };
+}
+
+export default translate(connect(_mapStateToProps)(UploadPresentationButton));
\ No newline at end of file
diff --git a/react/features/upload-ppt/components/native/index.js b/react/features/upload-ppt/components/native/index.js
new file mode 100644
index 000000000..999db9ad2
--- /dev/null
+++ b/react/features/upload-ppt/components/native/index.js
@@ -0,0 +1,4 @@
+// @flow
+
+export { default as UploadPresentationButton } from './UploadPresentationButton'
+export { default as UploadPPTDialog } from './UploadPPTDialog'
\ No newline at end of file
diff --git a/react/features/upload-ppt/components/native/styles.js b/react/features/upload-ppt/components/native/styles.js
new file mode 100644
index 000000000..713ec49a1
--- /dev/null
+++ b/react/features/upload-ppt/components/native/styles.js
@@ -0,0 +1,37 @@
+import { PixelRatio, StyleSheet } from 'react-native';
+
+const styles = StyleSheet.create({
+    container: {
+      justifyContent: 'center',
+      alignItems: 'center',
+      height:100
+    },
+    button: {
+      borderColor: '#9B9B9B',
+      borderWidth: 1 / PixelRatio.get(),
+      justifyContent:"center",
+      alignItems:"center",
+      margin: 5,
+      padding: 5
+    },
+    fileInfo: {
+      borderColor: '#9B9B9B',
+      borderWidth: 1 / PixelRatio.get(),
+      margin: 5,
+      padding: 5,
+      width:"70%"
+    },
+    upload:{
+      flexDirection:"row"
+    },
+    title:{
+      fontWeight:"bold",
+      fontSize:17,
+      paddingBottom:10
+    },
+    invalidFile: {
+      color:"red"
+    }
+  });
+
+  export default styles
\ No newline at end of file
diff --git a/react/features/upload-ppt/constants.js b/react/features/upload-ppt/constants.js
new file mode 100644
index 000000000..957294cea
--- /dev/null
+++ b/react/features/upload-ppt/constants.js
@@ -0,0 +1,18 @@
+// @flow
+
+
+
+/**
+ * Fixed name of the PPT sharer fake participant.
+ * @type {string}
+ */
+export const PPT_PARTICIPANT_NAME = 'PPT';
+
+
+
+
+/**
+ * Shared video command.
+ * @type {string}
+ */
+export const SHARED_VIDEO = 'shared-video';
diff --git a/react/features/upload-ppt/functions.js b/react/features/upload-ppt/functions.js
new file mode 100644
index 000000000..b4ba6ee55
--- /dev/null
+++ b/react/features/upload-ppt/functions.js
@@ -0,0 +1,20 @@
+// @flow
+
+import { getParticipants } from '../base/participants';
+
+import { PPT_PARTICIPANT_NAME } from './constants';
+
+
+
+
+/**
+ * Returns true if there is a PPT is being shared in the meeting.
+ *
+ * @param {Object | Function} stateful - The Redux state or a function that gets resolved to the Redux state.
+ * @returns {boolean}
+ */
+export function isVideoPlaying(stateful: Object | Function): boolean {
+    return Boolean(getParticipants(stateful).find(p => p.isFakeParticipant
+        && (p.name === PPT_PARTICIPANT_NAME))
+    );
+}
diff --git a/react/features/upload-ppt/middleware.any.js b/react/features/upload-ppt/middleware.any.js
new file mode 100644
index 000000000..5c22cbcc0
--- /dev/null
+++ b/react/features/upload-ppt/middleware.any.js
@@ -0,0 +1,101 @@
+// @flow
+
+import { CONFERENCE_LEFT, getCurrentConference, getRoomName} from '../base/conference';
+import { getLocalParticipant, PARTICIPANT_LEFT, participantLeft } from '../base/participants';
+import { MiddlewareRegistry, StateListenerRegistry } from '../base/redux';
+
+import { SET_UPLOAD_PPT_STATUS, SET_UPLOADING, TRY_UPLOAD } from './actionTypes';
+import { resetUploadPPTStatus, retryUpload, setUploadPPTStatus } from './actions.any';
+import { batch } from 'react-redux';
+import { openDialog } from '../base/dialog/actions';
+import { AlertDialog } from '../base/dialog/components'
+
+
+/**
+ * Middleware for uploading the ppt
+ * 
+ * @param {Store} store - The redux store.
+ * @returns {Function}
+ */
+MiddlewareRegistry.register(store => next => async action => {
+    const { dispatch, getState } = store;
+    const state = getState();
+    const conference = getCurrentConference(state)
+    const room = getRoomName(state)
+    const localParticipantId = getLocalParticipant(state)?.id;
+    const { file, ownerId } = action;
+
+    switch (action.type) {
+
+        case CONFERENCE_LEFT:
+            dispatch(resetUploadPPTStatus());
+            break;
+
+        case TRY_UPLOAD:
+            if (localParticipantId === ownerId) {
+                try{
+                    const formdata = new FormData();
+                    formdata.append("sampleFile", { name: file.fileName, uri: file.uri, type: file.type });
+                    formdata.append("username", room)
+
+                    const requestOptions = {
+                        method: 'POST',
+                        body: formdata,
+                        redirect: 'follow'
+                    };
+
+                    dispatch({ 
+                                type: SET_UPLOADING,
+                                loading: true 
+                            })
+                  
+
+                    fetch("https://sangoshthee.cdac.in/FileUploadService", requestOptions)
+                        .then(response => response.text())
+                        .then(result =>  { 
+                            console.log(result)
+                            if(result.status === "1"){
+                                dispatch({
+                                    type: SET_UPLOAD_PPT_STATUS,
+                                    file,
+                                    status: result.status,
+                                    ownerId
+                                })
+                            }
+                            dispatch(openDialog(AlertDialog, {
+                                contentKey:{
+                                    key: result.message
+                                }
+                            }))
+                        })
+                        .catch(error => {
+                            console.log('error', error)
+                            dispatch(openDialog(AlertDialog, {
+                                contentKey:error
+                            }))
+                        }); 
+                        dispatch({ 
+                            type: SET_UPLOADING,
+                            loading:false 
+                        })
+                } catch(err){
+                    console.log(err)
+                    dispatch({ 
+                        type: SET_UPLOADING,
+                        loading: false 
+                    })
+                }
+            }
+            break;
+
+        case PARTICIPANT_LEFT:
+            batch(()=>{
+                dispatch(participantLeft(localParticipantId, conference, false));
+                dispatch(resetUploadPPTStatus())
+            })
+            break;
+        }
+
+    return next(action);
+});
+
diff --git a/react/features/upload-ppt/middleware.native.js b/react/features/upload-ppt/middleware.native.js
new file mode 100644
index 000000000..fefd329e8
--- /dev/null
+++ b/react/features/upload-ppt/middleware.native.js
@@ -0,0 +1 @@
+import './middleware.any';
diff --git a/react/features/upload-ppt/reducer.native.js b/react/features/upload-ppt/reducer.native.js
new file mode 100644
index 000000000..0eb50c03d
--- /dev/null
+++ b/react/features/upload-ppt/reducer.native.js
@@ -0,0 +1,32 @@
+// @flow
+
+import { ReducerRegistry } from '../base/redux';
+
+import { SET_UPLOAD_PPT_STATUS, RESET_UPLOAD_PPT_STATUS, RETRY_UPLOAD, SET_UPLOADING} from './actionTypes';
+
+const initialState = {};
+
+/**
+ * Reduces the Redux actions of the feature features/upload-ppt.
+ */
+ReducerRegistry.register('features/upload-ppt', (state = initialState, action) => {
+    const { file, status, ownerId, loading } = action;
+
+    switch (action.type) {
+    case RESET_UPLOAD_PPT_STATUS:
+        return initialState;
+    case SET_UPLOAD_PPT_STATUS:
+        return {
+            ...state,
+            ownerId,
+            status,
+            file
+        };
+    case SET_UPLOADING:
+        return {
+            loading
+        }
+    default:
+        return state;
+    }
+});
diff --git a/react/features/video-menu/components/AbstractBlockAudioVideoDialog.js b/react/features/video-menu/components/AbstractBlockAudioVideoDialog.js
new file mode 100644
index 000000000..28ae74fbf
--- /dev/null
+++ b/react/features/video-menu/components/AbstractBlockAudioVideoDialog.js
@@ -0,0 +1,46 @@
+// @flow
+
+import { Component } from 'react';
+
+type Props = {
+
+    /**
+     * The Redux dispatch function.
+     */
+    dispatch: Function,
+
+    /**
+     * Function to translate i18n labels.
+     */
+    t: Function
+};
+
+/**
+ * Abstract dialog to confirm blocking mic and camera for all participants.
+ */
+export default class AbstractBlockAudioVideoDialog
+    extends Component<Props> {
+    /**
+     * Initializes a new {@code AbstractBlockAudioVideoDialog} instance.
+     *
+     * @inheritdoc
+     */
+    constructor(props: Props) {
+        super(props);
+
+        this._onSubmit = this._onSubmit.bind(this);
+    }
+
+    _onSubmit: () => boolean;
+
+    /**
+     * Callback for the confirm button.
+     *
+     * @private
+     * @returns {boolean} - True (to note that the modal should be closed).
+     */
+    _onSubmit() {
+
+        return true;
+    }
+}
diff --git a/react/features/video-menu/components/native/BlockAudioVideoDialog.js b/react/features/video-menu/components/native/BlockAudioVideoDialog.js
new file mode 100644
index 000000000..6b374252a
--- /dev/null
+++ b/react/features/video-menu/components/native/BlockAudioVideoDialog.js
@@ -0,0 +1,32 @@
+// @flow
+
+import React from 'react';
+
+import { ConfirmDialog } from '../../../base/dialog';
+import { translate } from '../../../base/i18n';
+import { connect } from '../../../base/redux';
+import AbstractBlockAudioVideoDialog
+    from '../AbstractBlockAudioVideoDialog';
+
+/**
+ * Dialog to confirm a remote participant kick action.
+ */
+class BlockAudioVideoDialog extends AbstractBlockAudioVideoDialog {
+    /**
+     * Implements React's {@link Component#render()}.
+     *
+     * @inheritdoc
+     * @returns {ReactElement}
+     */
+    render() {
+        return (
+            <ConfirmDialog
+                contentKey = 'dialog.blockAudioVideoMsg'
+                onSubmit = { this._onSubmit } />
+        );
+    }
+
+    _onSubmit: () => boolean;
+}
+
+export default translate(connect()(BlockAudioVideoDialog));
diff --git a/react/features/video-menu/components/native/MuteRemoteParticipantsVideoDialog.js b/react/features/video-menu/components/native/MuteRemoteParticipantsVideoDialog.js
new file mode 100644
index 000000000..89f7161e2
--- /dev/null
+++ b/react/features/video-menu/components/native/MuteRemoteParticipantsVideoDialog.js
@@ -0,0 +1,32 @@
+// @flow
+
+import React from 'react';
+
+import { ConfirmDialog } from '../../../base/dialog';
+import { translate } from '../../../base/i18n';
+import { connect } from '../../../base/redux';
+import AbstractMuteRemoteParticipantsVideoDialog
+    from '../AbstractMuteRemoteParticipantsVideoDialog';
+
+/**
+ * Dialog to confirm a remote participant's video stop action.
+ */
+class MuteRemoteParticipantsVideoDialog extends AbstractMuteRemoteParticipantsVideoDialog {
+    /**
+     * Implements React's {@link Component#render()}.
+     *
+     * @inheritdoc
+     * @returns {ReactElement}
+     */
+    render() {
+        return (
+            <ConfirmDialog
+                contentKey = 'dialog.muteParticipantsVideoDialog'
+                onSubmit = { this._onSubmit } />
+        );
+    }
+
+    _onSubmit: () => boolean;
+}
+
+export default translate(connect()(MuteRemoteParticipantsVideoDialog));
diff --git a/react/features/video-menu/components/native/VolumeSlider.js b/react/features/video-menu/components/native/VolumeSlider.js
new file mode 100644
index 000000000..ffd655486
--- /dev/null
+++ b/react/features/video-menu/components/native/VolumeSlider.js
@@ -0,0 +1,157 @@
+// @flow
+
+import _ from 'lodash';
+import React, { PureComponent } from 'react';
+import { Slider, View } from 'react-native';
+import { withTheme } from 'react-native-paper';
+
+import { Icon, IconVolumeEmpty } from '../../../base/icons';
+import { getLocalParticipant } from '../../../base/participants';
+import { connect } from '../../../base/redux';
+import { setVolume } from '../../../participants-pane/actions.native';
+import { VOLUME_SLIDER_SCALE } from '../../constants';
+
+import styles from './styles';
+
+
+/**
+ * The type of the React {@code Component} props of {@link VolumeSlider}.
+ */
+type Props = {
+
+    /**
+     * Whether the participant enters the conference silent.
+     */
+    _startSilent: boolean,
+
+    /**
+     * The volume level for the participant.
+     */
+    _volume: number,
+
+    /**
+     * The redux dispatch function.
+     */
+    dispatch: Function,
+
+    /**
+     * The ID of the participant.
+     */
+    participantID: string,
+
+    /**
+     * Theme used for styles.
+     */
+    theme: Object
+};
+
+/**
+ * The type of the React {@code Component} state of {@link VolumeSlider}.
+ */
+type State = {
+
+    /**
+     * The volume of the participant's audio element. The value will
+     * be represented by a slider.
+     */
+    volumeLevel: number
+};
+
+/**
+ * Component that renders the volume slider.
+ *
+ * @returns {React$Element<any>}
+ */
+class VolumeSlider extends PureComponent<Props, State> {
+    _onVolumeChange: Function;
+    _originalVolumeChange: Function;
+
+    /**
+     * Initializes a new {@code VolumeSlider} instance.
+     *
+     * @param {Object} props - The read-only properties with which the new
+     * instance is to be initialized.
+     */
+    constructor(props: Props) {
+        super(props);
+
+        this.state = {
+            volumeLevel: props._volume || 0
+        };
+
+        this._originalVolumeChange = this._onVolumeChange;
+
+        this._onVolumeChange = _.throttle(
+            volumeLevel => this._originalVolumeChange(volumeLevel), 500
+        );
+    }
+
+    /**
+     * Implements React's {@link Component#render()}.
+     *
+     * @inheritdoc
+     * @returns {ReactElement}
+     */
+    render() {
+        const { _startSilent, theme } = this.props;
+        const { volumeLevel } = this.state;
+        const { palette } = theme;
+        const onVolumeChange = _startSilent ? undefined : this._onVolumeChange;
+
+        return (
+            <View style = { styles.volumeSliderContainer } >
+                <Icon
+                    size = { 20 }
+                    src = { IconVolumeEmpty } />
+                <Slider
+                    maximumTrackTintColor = { palette.field02 }
+                    maximumValue = { VOLUME_SLIDER_SCALE }
+                    minimumTrackTintColor = { palette.action01 }
+                    minimumValue = { 0 }
+                    onValueChange = { onVolumeChange }
+                    style = { styles.sliderContainer }
+                    thumbTintColor = { palette.field02 }
+                    value = { volumeLevel } />
+            </View>
+
+        );
+    }
+
+    /**
+     * Sets the internal state of the volume level for the volume slider.
+     * Invokes the prop onVolumeChange to notify of volume changes.
+     *
+     * @param {number} volumeLevel - Selected volume on slider.
+     * @private
+     * @returns {void}
+     */
+    _onVolumeChange(volumeLevel) {
+        const { dispatch, participantID } = this.props;
+
+        dispatch(setVolume(participantID, volumeLevel));
+    }
+}
+
+/**
+ * Maps (parts of) the Redux state to the associated props for the
+ * {@code VolumeSlider} component.
+ *
+ * @param {Object} state - The Redux state.
+ * @param {Object} ownProps - The own props of the component.
+ * @returns {Props}
+ */
+function mapStateToProps(state, ownProps): Object {
+    const { participantID } = ownProps;
+    const { participantsVolume } = state['features/participants-pane'];
+    const { startSilent } = state['features/base/config'];
+    const localParticipant = getLocalParticipant(state);
+
+    return {
+        _startSilent: Boolean(startSilent),
+        _volume: localParticipant ? undefined : participantID
+            ? participantsVolume[participantID] : undefined
+    };
+}
+
+export default connect(mapStateToProps)(withTheme(VolumeSlider));
+
diff --git a/react/features/video-menu/constants.js b/react/features/video-menu/constants.js
new file mode 100644
index 000000000..25f6de2c0
--- /dev/null
+++ b/react/features/video-menu/constants.js
@@ -0,0 +1,8 @@
+// @flow
+
+/**
+ * Used to modify initialValue, which is expected to be a decimal value between
+ * 0 and 1, and converts it to a number representable by an input slider, which
+ * recognizes whole numbers.
+ */
+export const VOLUME_SLIDER_SCALE = 100;
-- 
2.25.1

